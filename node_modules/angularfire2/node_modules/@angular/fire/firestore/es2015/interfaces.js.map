{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../../src/firestore/interfaces.ts"],"names":[],"mappings":"AAgDC,CAAC","sourcesContent":["import { Subscriber } from 'rxjs';\nimport { firestore } from 'firebase/app';\n\nexport type Settings =  firestore.Settings;\nexport type CollectionReference = firestore.CollectionReference;\nexport type DocumentReference = firestore.DocumentReference;\nexport type PersistenceSettings = firestore.PersistenceSettings;\nexport type DocumentChangeType = firestore.DocumentChangeType;\nexport type SnapshotOptions = firestore.SnapshotOptions;\nexport type FieldPath = firestore.FieldPath;\nexport type Query = firestore.Query;\n\nexport type SetOptions = firestore.SetOptions;\nexport type DocumentData = firestore.DocumentData;\n\nexport interface DocumentSnapshotExists<T> extends firestore.DocumentSnapshot {\n  readonly exists: true;\n  data(options?: SnapshotOptions): T;\n}\n\nexport interface DocumentSnapshotDoesNotExist extends firestore.DocumentSnapshot {\n  readonly exists: false;\n  data(options?: SnapshotOptions): undefined;\n  get(fieldPath: string | FieldPath, options?: SnapshotOptions): undefined;\n}\n\nexport type DocumentSnapshot<T> = DocumentSnapshotExists<T> | DocumentSnapshotDoesNotExist;\n\nexport interface QueryDocumentSnapshot<T> extends firestore.QueryDocumentSnapshot {\n  data(options?: SnapshotOptions): T;\n}\n\nexport interface QuerySnapshot<T> extends firestore.QuerySnapshot {\n  readonly docs: QueryDocumentSnapshot<T>[];\n}\n\nexport interface DocumentChange<T> extends firestore.DocumentChange {\n  readonly doc: QueryDocumentSnapshot<T>;\n}\n\nexport interface DocumentChangeAction<T> {\n  type: DocumentChangeType;\n  payload: DocumentChange<T>;\n}\n\nexport interface Action<T> {\n  type: string;\n  payload: T;\n};\n\nexport interface Reference<T> {\n  onSnapshot: (sub: Subscriber<any>) => any;\n}\n\n// A convience type for making a query.\n// Example: const query = (ref) => ref.where('name', == 'david');\nexport type QueryFn = (ref: CollectionReference) => Query;\n\n/**\n * A structure that provides an association between a reference\n * and a query on that reference. Note: Performing operations\n * on the reference can lead to confusing results with complicated\n * queries.\n *\n * Example:\n *\n * const query = ref.where('type', '==', 'Book').\n *                  .where('price', '>' 18.00)\n *                  .where('price', '<' 100.00)\n *                  .where('category', '==', 'Fiction')\n *                  .where('publisher', '==', 'BigPublisher')\n *\n * // This addition would not be a result of the query above\n * ref.add({\n *  type: 'Magazine',\n *  price: 4.99,\n *  category: 'Sports',\n *  publisher: 'SportsPublisher'\n * });\n */\nexport interface AssociatedReference {\n  ref: CollectionReference;\n  query: Query;\n}\n"]}