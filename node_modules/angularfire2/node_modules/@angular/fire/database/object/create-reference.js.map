{"version":3,"file":"create-reference.js","sourceRoot":"","sources":["../../../../src/database/object/create-reference.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AAErC,OAAO,EAAE,2BAA2B,EAAE,MAAM,oBAAoB,CAAC;AAGjE,MAAM,UAAU,qBAAqB,CAAQ,KAAoB,EAAE,UAA+B;IAChG,OAAO;QACL,KAAK,OAAA;QACL,eAAe,EAAf;YACE,IAAM,gBAAgB,GAAG,2BAA2B,CAAI,KAAK,CAAC,EAAE,CAAC;YACjE,OAAO,UAAU,CAAC,SAAS,CAAC,sBAAsB,CAChD,UAAU,CAAC,SAAS,CAAC,iBAAiB,CACpC,gBAAgB,CACjB,CACF,CAAC;QACJ,CAAC;QACD,MAAM,YAAC,IAAgB,IAAI,OAAO,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,IAAW,CAAkB,CAAC,CAAC,CAAC;QACnF,GAAG,YAAC,IAAO,IAAI,OAAO,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAkB,CAAC,CAAC,CAAC;QAC7D,MAAM,gBAAK,OAAO,KAAK,CAAC,GAAG,CAAC,MAAM,EAAmB,CAAC,CAAC,CAAC;QACxD,YAAY,EAAZ;YACE,IAAM,gBAAgB,GAAG,2BAA2B,CAAC,KAAK,CAAC,EAAE,CAAC;YAC9D,OAAO,UAAU,CAAC,SAAS,CAAC,sBAAsB,CAChD,UAAU,CAAC,SAAS,CAAC,iBAAiB,CACpC,gBAAgB,CACjB,CACF,CAAC,IAAI,CACJ,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,EAAO,CAAC,CAAC,CAAC,IAAI,EAA1D,CAA0D,CAAC,CAC1E,CAAA;QACH,CAAC;KACF,CAAA;AACH,CAAC","sourcesContent":["import { map } from 'rxjs/operators';\nimport { DatabaseQuery, AngularFireObject } from '../interfaces';\nimport { createObjectSnapshotChanges } from './snapshot-changes';\nimport { AngularFireDatabase } from '../database';\n\nexport function createObjectReference<T=any>(query: DatabaseQuery, afDatabase: AngularFireDatabase): AngularFireObject<T> {\n  return {\n    query,\n    snapshotChanges<T>() {\n      const snapshotChanges$ = createObjectSnapshotChanges<T>(query)();\n      return afDatabase.scheduler.keepUnstableUntilFirst(\n        afDatabase.scheduler.runOutsideAngular(\n          snapshotChanges$\n        )\n      );\n    },\n    update(data: Partial<T>) { return query.ref.update(data as any) as Promise<void>; },\n    set(data: T) { return query.ref.set(data) as Promise<void>; },\n    remove() { return query.ref.remove() as Promise<void>; },\n    valueChanges<T>() { \n      const snapshotChanges$ = createObjectSnapshotChanges(query)();\n      return afDatabase.scheduler.keepUnstableUntilFirst(\n        afDatabase.scheduler.runOutsideAngular(\n          snapshotChanges$\n        )\n      ).pipe(\n        map(action => action.payload.exists() ? action.payload.val() as T : null)\n      )\n    },\n  }\n}\n"]}