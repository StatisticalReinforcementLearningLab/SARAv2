/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
var BlobService = /** @class */ (function () {
    function BlobService(http) {
        this.http = http;
    }
    /**
     * @param {?} params
     * @param {?} filename
     * @param {?=} useAzureStorageEmulator
     * @param {?=} azureStorageEmulatorBaseUrl
     * @return {?}
     */
    BlobService.prototype.generateBlobUrl = /**
     * @param {?} params
     * @param {?} filename
     * @param {?=} useAzureStorageEmulator
     * @param {?=} azureStorageEmulatorBaseUrl
     * @return {?}
     */
    function (params, filename, useAzureStorageEmulator, azureStorageEmulatorBaseUrl) {
        if (useAzureStorageEmulator === void 0) { useAzureStorageEmulator = false; }
        if (azureStorageEmulatorBaseUrl === void 0) { azureStorageEmulatorBaseUrl = ''; }
        /** @type {?} */
        var url = useAzureStorageEmulator ? azureStorageEmulatorBaseUrl : "https://" + params.storageAccount + ".blob.core.windows.net";
        return url + "/" + params.containerName + "/" + filename;
    };
    /**
     * @param {?} reader
     * @param {?} state
     * @return {?}
     */
    BlobService.prototype.uploadFileInBlocks = /**
     * @param {?} reader
     * @param {?} state
     * @return {?}
     */
    function (reader, state) {
        if (!state.cancelled) {
            if (state.totalBytesRemaining > 0) {
                /** @type {?} */
                var fileContent = state.file.slice(state.currentFilePointer, state.currentFilePointer + state.maxBlockSize);
                /** @type {?} */
                var blockId = state.blockIdPrefix + this.prependZeros(state.blockIds.length, 6);
                state.blockIds.push(btoa(blockId));
                reader.readAsArrayBuffer(fileContent);
                state.currentFilePointer += state.maxBlockSize;
                state.totalBytesRemaining -= state.maxBlockSize;
                if (state.totalBytesRemaining < state.maxBlockSize) {
                    state.maxBlockSize = state.totalBytesRemaining;
                }
            }
            else {
                this.commitBlockList(state);
            }
        }
    };
    /**
     * @param {?} state
     * @return {?}
     */
    BlobService.prototype.commitBlockList = /**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        /** @type {?} */
        var uri = state.fileUrl + '&comp=blocklist';
        /** @type {?} */
        var headers = new HttpHeaders({ 'x-ms-blob-content-type': state.file.type });
        /** @type {?} */
        var requestBody = '<?xml version=\'1.0\' encoding=\'utf-8\'?><BlockList>';
        for (var i = 0; i < state.blockIds.length; i++) {
            requestBody += '<Latest>' + state.blockIds[i] + '</Latest>';
        }
        requestBody += '</BlockList>';
        this.http.put(uri, requestBody, { headers: headers, responseType: 'text' })
            .subscribe(function (_elem) {
            if (state.complete) {
                state.complete();
            }
        }, function (err) {
            console.log({ error: err });
            if (state.error) {
                state.error(err);
            }
        });
    };
    /**
     * @param {?} config
     * @return {?}
     */
    BlobService.prototype.initializeState = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        /** @type {?} */
        var blockSize = BlobService.DefaultBlockSize;
        if (config.blockSize) {
            blockSize = config.blockSize;
        }
        /** @type {?} */
        var maxBlockSize = blockSize;
        /** @type {?} */
        var numberOfBlocks = 1;
        /** @type {?} */
        var file = config.file;
        /** @type {?} */
        var fileSize = file.size;
        if (fileSize < blockSize) {
            maxBlockSize = fileSize;
        }
        if (fileSize % maxBlockSize === 0) {
            numberOfBlocks = fileSize / maxBlockSize;
        }
        else {
            numberOfBlocks = fileSize / maxBlockSize + 1;
        }
        return {
            maxBlockSize: maxBlockSize,
            // Each file will be split in 256 KB.
            numberOfBlocks: numberOfBlocks,
            totalBytesRemaining: fileSize,
            currentFilePointer: 0,
            blockIds: new Array(),
            blockIdPrefix: 'block-',
            bytesUploaded: 0,
            submitUri: null,
            file: file,
            baseUrl: config.baseUrl,
            sasToken: config.sasToken,
            fileUrl: config.baseUrl + config.sasToken,
            progress: config.progress,
            complete: config.complete,
            error: config.error,
            cancelled: false
        };
    };
    /**
     * @param {?} config
     * @return {?}
     */
    BlobService.prototype.upload = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        var _this = this;
        /** @type {?} */
        var state = this.initializeState(config);
        /** @type {?} */
        var reader = new FileReader();
        reader.onloadend = function (evt) {
            if (evt.target.readyState === 2 && !state.cancelled) {
                /** @type {?} */
                var uri = state.fileUrl + '&comp=block&blockid=' + state.blockIds[state.blockIds.length - 1];
                /** @type {?} */
                var requestData = evt.target.result;
                /** @type {?} */
                var requestData2_1 = new Uint8Array(evt.target.result);
                /** @type {?} */
                var headers = new HttpHeaders({ 'x-ms-blob-type': 'BlockBlob', 'Content-Type': 'application/octet-stream' });
                _this.http.put(uri, requestData, { headers: headers, responseType: 'text' })
                    .subscribe(function (_elem) {
                    state.bytesUploaded += requestData2_1.length;
                    /** @type {?} */
                    var percentComplete = Math.round((state.bytesUploaded / state.file.size) * 1000) / 10;
                    if (state.progress) {
                        state.progress(percentComplete);
                    }
                    _this.uploadFileInBlocks(reader, state);
                }, function (err) {
                    console.log({ error: err });
                    if (state.error) {
                        state.error(err);
                    }
                });
            }
        };
        this.uploadFileInBlocks(reader, state);
        return {
            cancel: function () {
                state.cancelled = true;
            }
        };
    };
    /**
     * @param {?} number
     * @param {?} length
     * @return {?}
     */
    BlobService.prototype.prependZeros = /**
     * @param {?} number
     * @param {?} length
     * @return {?}
     */
    function (number, length) {
        /** @type {?} */
        var str = '' + number;
        while (str.length < length) {
            str = '0' + str;
        }
        return str;
    };
    BlobService.DefaultBlockSize = 1024 * 32;
    BlobService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    BlobService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return BlobService;
}());
export { BlobService };
if (false) {
    /** @type {?} */
    BlobService.DefaultBlockSize;
    /** @type {?} */
    BlobService.prototype.http;
}

//# sourceMappingURL=data:application/json;base64,