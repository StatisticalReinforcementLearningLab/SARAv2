{"version":3,"file":"angular-azure-blob-service.umd.js.map","sources":["ng://angular-azure-blob-service/src/app/modules/blob/blob.service.ts","ng://angular-azure-blob-service/src/app/modules/blob/blob.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core'\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http'\r\nimport { UploadParams, UploadConfig } from './definitions'\r\n@Injectable()\r\nexport class BlobService {\r\n  static DefaultBlockSize = 1024 * 32\r\n  constructor (private http: HttpClient) { }\r\n  generateBlobUrl (\r\n    params: UploadParams,\r\n    filename: string,\r\n    useAzureStorageEmulator = false,\r\n    azureStorageEmulatorBaseUrl = '') {\r\n    const url = useAzureStorageEmulator ? azureStorageEmulatorBaseUrl : `https://${params.storageAccount}.blob.core.windows.net`\r\n    return `${url}/${params.containerName}/${filename}`\r\n  }\r\n  private uploadFileInBlocks (reader, state) {\r\n      if (!state.cancelled) {\r\n          if (state.totalBytesRemaining > 0) {\r\n              const fileContent = state.file.slice(state.currentFilePointer, state.currentFilePointer + state.maxBlockSize)\r\n              const blockId = state.blockIdPrefix + this.prependZeros(state.blockIds.length, 6)\r\n              state.blockIds.push(btoa(blockId))\r\n              reader.readAsArrayBuffer(fileContent)\r\n              state.currentFilePointer += state.maxBlockSize\r\n              state.totalBytesRemaining -= state.maxBlockSize\r\n              if (state.totalBytesRemaining < state.maxBlockSize) {\r\n                  state.maxBlockSize = state.totalBytesRemaining\r\n              }\r\n          } else {\r\n              this.commitBlockList(state)\r\n          }\r\n      }\r\n  }\r\n  private commitBlockList (state) {\r\n      const uri = state.fileUrl + '&comp=blocklist'\r\n      const headers = new HttpHeaders({ 'x-ms-blob-content-type': state.file.type })\r\n      let requestBody = '<?xml version=\\'1.0\\' encoding=\\'utf-8\\'?><BlockList>'\r\n      for (let i = 0; i < state.blockIds.length; i++) {\r\n          requestBody += '<Latest>' + state.blockIds[i] + '</Latest>'\r\n      }\r\n      requestBody += '</BlockList>'\r\n\r\n      this.http.put(uri, requestBody, { headers: headers, responseType: 'text' })\r\n        .subscribe(_elem => {\r\n          if (state.complete) {\r\n            state.complete()\r\n          }\r\n        }, err => {\r\n          console.log({ error: err })\r\n          if (state.error) {\r\n            state.error(err)\r\n          }\r\n        })\r\n  }\r\n  private initializeState (config: UploadConfig) {\r\n      let blockSize = BlobService.DefaultBlockSize\r\n      if (config.blockSize) {\r\n        blockSize = config.blockSize\r\n      }\r\n      let maxBlockSize = blockSize\r\n      let numberOfBlocks = 1\r\n      const file = config.file\r\n      const fileSize = file.size\r\n      if (fileSize < blockSize) {\r\n          maxBlockSize = fileSize\r\n      }\r\n      if (fileSize % maxBlockSize === 0) {\r\n          numberOfBlocks = fileSize / maxBlockSize\r\n      } else {\r\n          numberOfBlocks = fileSize / maxBlockSize + 1\r\n      }\r\n\r\n      return {\r\n          maxBlockSize: maxBlockSize, // Each file will be split in 256 KB.\r\n          numberOfBlocks: numberOfBlocks,\r\n          totalBytesRemaining: fileSize,\r\n          currentFilePointer: 0,\r\n          blockIds: new Array(),\r\n          blockIdPrefix: 'block-',\r\n          bytesUploaded: 0,\r\n          submitUri: null,\r\n          file: file,\r\n          baseUrl: config.baseUrl,\r\n          sasToken: config.sasToken,\r\n          fileUrl: config.baseUrl + config.sasToken,\r\n          progress: config.progress,\r\n          complete: config.complete,\r\n          error: config.error,\r\n          cancelled: false\r\n      }\r\n  }\r\n  upload (config: UploadConfig) {\r\n    const state = this.initializeState(config)\r\n    const reader = new FileReader()\r\n    reader.onloadend = (evt: any) => {\r\n      if (evt.target.readyState === 2 && !state.cancelled) {\r\n        const uri = state.fileUrl + '&comp=block&blockid=' + state.blockIds[state.blockIds.length - 1]\r\n        const requestData = evt.target.result\r\n        const requestData2 = new Uint8Array(evt.target.result)\r\n        const headers = new HttpHeaders({ 'x-ms-blob-type': 'BlockBlob', 'Content-Type': 'application/octet-stream' })\r\n        this.http.put(uri, requestData, { headers: headers, responseType: 'text' })\r\n          .subscribe(_elem => {\r\n            state.bytesUploaded += requestData2.length\r\n            const percentComplete = Math.round((state.bytesUploaded / state.file.size) * 1000) / 10\r\n            if (state.progress) {\r\n              state.progress(percentComplete)\r\n            }\r\n\r\n            this.uploadFileInBlocks(reader, state)\r\n          }, err => {\r\n            console.log({ error: err })\r\n            if (state.error) {\r\n              state.error(err)\r\n            }\r\n          })\r\n          }\r\n      }\r\n\r\n      this.uploadFileInBlocks(reader, state)\r\n\r\n      return {\r\n          cancel: () => {\r\n              state.cancelled = true\r\n          }\r\n      }\r\n  }\r\n  private prependZeros (number, length) {\r\n    let str = '' + number\r\n    while (str.length < length) {\r\n      str = '0' + str\r\n    }\r\n    return str\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core'\r\nimport { CommonModule } from '@angular/common'\r\nimport { HttpClientModule } from '@angular/common/http'\r\n\r\nimport { BlobService } from './blob.service'\r\nexport { BlobService } from './blob.service'\r\nexport { UploadConfig, UploadParams } from './definitions'\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    HttpClientModule\r\n  ],\r\n  declarations: [],\r\n  exports: []\r\n})\r\nexport class BlobModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: BlobModule,\r\n      providers: [\r\n        BlobService\r\n      ]\r\n    }\r\n  }\r\n}\r\n"],"names":["http","HttpHeaders","Injectable","HttpClient","NgModule","CommonModule","HttpClientModule"],"mappings":"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"}
