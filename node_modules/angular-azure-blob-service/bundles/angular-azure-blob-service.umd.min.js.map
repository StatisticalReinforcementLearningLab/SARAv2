{"version":3,"sources":["ng://angular-azure-blob-service/src/app/modules/blob/blob.service.ts","ng://angular-azure-blob-service/src/app/modules/blob/blob.module.ts"],"names":["BlobService","http","this","prototype","generateBlobUrl","params","filename","useAzureStorageEmulator","azureStorageEmulatorBaseUrl","storageAccount","containerName","uploadFileInBlocks","reader","state","cancelled","totalBytesRemaining","fileContent","file","slice","currentFilePointer","maxBlockSize","blockId","blockIdPrefix","prependZeros","blockIds","length","push","btoa","readAsArrayBuffer","commitBlockList","uri","fileUrl","headers","HttpHeaders","x-ms-blob-content-type","type","requestBody","i","put","responseType","subscribe","_elem","complete","err","console","log","error","initializeState","config","blockSize","DefaultBlockSize","fileSize","size","numberOfBlocks","Array","bytesUploaded","submitUri","baseUrl","sasToken","progress","upload","_this","FileReader","onloadend","evt","target","readyState","requestData","result","requestData2_1","Uint8Array","x-ms-blob-type","Content-Type","percentComplete","Math","round","cancel","number","str","Injectable","HttpClient","BlobModule","forRoot","ngModule","providers","NgModule","args","imports","CommonModule","HttpClientModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core'\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http'\r\nimport { UploadParams, UploadConfig } from './definitions'\r\n@Injectable()\r\nexport class BlobService {\r\n  static DefaultBlockSize = 1024 * 32\r\n  constructor (private http: HttpClient) { }\r\n  generateBlobUrl (\r\n    params: UploadParams,\r\n    filename: string,\r\n    useAzureStorageEmulator = false,\r\n    azureStorageEmulatorBaseUrl = '') {\r\n    const url = useAzureStorageEmulator ? azureStorageEmulatorBaseUrl : `https://${params.storageAccount}.blob.core.windows.net`\r\n    return `${url}/${params.containerName}/${filename}`\r\n  }\r\n  private uploadFileInBlocks (reader, state) {\r\n      if (!state.cancelled) {\r\n          if (state.totalBytesRemaining > 0) {\r\n              const fileContent = state.file.slice(state.currentFilePointer, state.currentFilePointer + state.maxBlockSize)\r\n              const blockId = state.blockIdPrefix + this.prependZeros(state.blockIds.length, 6)\r\n              state.blockIds.push(btoa(blockId))\r\n              reader.readAsArrayBuffer(fileContent)\r\n              state.currentFilePointer += state.maxBlockSize\r\n              state.totalBytesRemaining -= state.maxBlockSize\r\n              if (state.totalBytesRemaining < state.maxBlockSize) {\r\n                  state.maxBlockSize = state.totalBytesRemaining\r\n              }\r\n          } else {\r\n              this.commitBlockList(state)\r\n          }\r\n      }\r\n  }\r\n  private commitBlockList (state) {\r\n      const uri = state.fileUrl + '&comp=blocklist'\r\n      const headers = new HttpHeaders({ 'x-ms-blob-content-type': state.file.type })\r\n      let requestBody = '<?xml version=\\'1.0\\' encoding=\\'utf-8\\'?><BlockList>'\r\n      for (let i = 0; i < state.blockIds.length; i++) {\r\n          requestBody += '<Latest>' + state.blockIds[i] + '</Latest>'\r\n      }\r\n      requestBody += '</BlockList>'\r\n\r\n      this.http.put(uri, requestBody, { headers: headers, responseType: 'text' })\r\n        .subscribe(_elem => {\r\n          if (state.complete) {\r\n            state.complete()\r\n          }\r\n        }, err => {\r\n          console.log({ error: err })\r\n          if (state.error) {\r\n            state.error(err)\r\n          }\r\n        })\r\n  }\r\n  private initializeState (config: UploadConfig) {\r\n      let blockSize = BlobService.DefaultBlockSize\r\n      if (config.blockSize) {\r\n        blockSize = config.blockSize\r\n      }\r\n      let maxBlockSize = blockSize\r\n      let numberOfBlocks = 1\r\n      const file = config.file\r\n      const fileSize = file.size\r\n      if (fileSize < blockSize) {\r\n          maxBlockSize = fileSize\r\n      }\r\n      if (fileSize % maxBlockSize === 0) {\r\n          numberOfBlocks = fileSize / maxBlockSize\r\n      } else {\r\n          numberOfBlocks = fileSize / maxBlockSize + 1\r\n      }\r\n\r\n      return {\r\n          maxBlockSize: maxBlockSize, // Each file will be split in 256 KB.\r\n          numberOfBlocks: numberOfBlocks,\r\n          totalBytesRemaining: fileSize,\r\n          currentFilePointer: 0,\r\n          blockIds: new Array(),\r\n          blockIdPrefix: 'block-',\r\n          bytesUploaded: 0,\r\n          submitUri: null,\r\n          file: file,\r\n          baseUrl: config.baseUrl,\r\n          sasToken: config.sasToken,\r\n          fileUrl: config.baseUrl + config.sasToken,\r\n          progress: config.progress,\r\n          complete: config.complete,\r\n          error: config.error,\r\n          cancelled: false\r\n      }\r\n  }\r\n  upload (config: UploadConfig) {\r\n    const state = this.initializeState(config)\r\n    const reader = new FileReader()\r\n    reader.onloadend = (evt: any) => {\r\n      if (evt.target.readyState === 2 && !state.cancelled) {\r\n        const uri = state.fileUrl + '&comp=block&blockid=' + state.blockIds[state.blockIds.length - 1]\r\n        const requestData = evt.target.result\r\n        const requestData2 = new Uint8Array(evt.target.result)\r\n        const headers = new HttpHeaders({ 'x-ms-blob-type': 'BlockBlob', 'Content-Type': 'application/octet-stream' })\r\n        this.http.put(uri, requestData, { headers: headers, responseType: 'text' })\r\n          .subscribe(_elem => {\r\n            state.bytesUploaded += requestData2.length\r\n            const percentComplete = Math.round((state.bytesUploaded / state.file.size) * 1000) / 10\r\n            if (state.progress) {\r\n              state.progress(percentComplete)\r\n            }\r\n\r\n            this.uploadFileInBlocks(reader, state)\r\n          }, err => {\r\n            console.log({ error: err })\r\n            if (state.error) {\r\n              state.error(err)\r\n            }\r\n          })\r\n          }\r\n      }\r\n\r\n      this.uploadFileInBlocks(reader, state)\r\n\r\n      return {\r\n          cancel: () => {\r\n              state.cancelled = true\r\n          }\r\n      }\r\n  }\r\n  private prependZeros (number, length) {\r\n    let str = '' + number\r\n    while (str.length < length) {\r\n      str = '0' + str\r\n    }\r\n    return str\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core'\r\nimport { CommonModule } from '@angular/common'\r\nimport { HttpClientModule } from '@angular/common/http'\r\n\r\nimport { BlobService } from './blob.service'\r\nexport { BlobService } from './blob.service'\r\nexport { UploadConfig, UploadParams } from './definitions'\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    HttpClientModule\r\n  ],\r\n  declarations: [],\r\n  exports: []\r\n})\r\nexport class BlobModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: BlobModule,\r\n      providers: [\r\n        BlobService\r\n      ]\r\n    }\r\n  }\r\n}\r\n"]}