import { Injectable, NgModule } from '@angular/core';
import { HttpClient, HttpHeaders, HttpClientModule } from '@angular/common/http';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class BlobService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @param {?} params
     * @param {?} filename
     * @param {?=} useAzureStorageEmulator
     * @param {?=} azureStorageEmulatorBaseUrl
     * @return {?}
     */
    generateBlobUrl(params, filename, useAzureStorageEmulator = false, azureStorageEmulatorBaseUrl = '') {
        /** @type {?} */
        const url = useAzureStorageEmulator ? azureStorageEmulatorBaseUrl : `https://${params.storageAccount}.blob.core.windows.net`;
        return `${url}/${params.containerName}/${filename}`;
    }
    /**
     * @param {?} reader
     * @param {?} state
     * @return {?}
     */
    uploadFileInBlocks(reader, state) {
        if (!state.cancelled) {
            if (state.totalBytesRemaining > 0) {
                /** @type {?} */
                const fileContent = state.file.slice(state.currentFilePointer, state.currentFilePointer + state.maxBlockSize);
                /** @type {?} */
                const blockId = state.blockIdPrefix + this.prependZeros(state.blockIds.length, 6);
                state.blockIds.push(btoa(blockId));
                reader.readAsArrayBuffer(fileContent);
                state.currentFilePointer += state.maxBlockSize;
                state.totalBytesRemaining -= state.maxBlockSize;
                if (state.totalBytesRemaining < state.maxBlockSize) {
                    state.maxBlockSize = state.totalBytesRemaining;
                }
            }
            else {
                this.commitBlockList(state);
            }
        }
    }
    /**
     * @param {?} state
     * @return {?}
     */
    commitBlockList(state) {
        /** @type {?} */
        const uri = state.fileUrl + '&comp=blocklist';
        /** @type {?} */
        const headers = new HttpHeaders({ 'x-ms-blob-content-type': state.file.type });
        /** @type {?} */
        let requestBody = '<?xml version=\'1.0\' encoding=\'utf-8\'?><BlockList>';
        for (let i = 0; i < state.blockIds.length; i++) {
            requestBody += '<Latest>' + state.blockIds[i] + '</Latest>';
        }
        requestBody += '</BlockList>';
        this.http.put(uri, requestBody, { headers: headers, responseType: 'text' })
            .subscribe(_elem => {
            if (state.complete) {
                state.complete();
            }
        }, err => {
            console.log({ error: err });
            if (state.error) {
                state.error(err);
            }
        });
    }
    /**
     * @param {?} config
     * @return {?}
     */
    initializeState(config) {
        /** @type {?} */
        let blockSize = BlobService.DefaultBlockSize;
        if (config.blockSize) {
            blockSize = config.blockSize;
        }
        /** @type {?} */
        let maxBlockSize = blockSize;
        /** @type {?} */
        let numberOfBlocks = 1;
        /** @type {?} */
        const file = config.file;
        /** @type {?} */
        const fileSize = file.size;
        if (fileSize < blockSize) {
            maxBlockSize = fileSize;
        }
        if (fileSize % maxBlockSize === 0) {
            numberOfBlocks = fileSize / maxBlockSize;
        }
        else {
            numberOfBlocks = fileSize / maxBlockSize + 1;
        }
        return {
            maxBlockSize: maxBlockSize,
            // Each file will be split in 256 KB.
            numberOfBlocks: numberOfBlocks,
            totalBytesRemaining: fileSize,
            currentFilePointer: 0,
            blockIds: new Array(),
            blockIdPrefix: 'block-',
            bytesUploaded: 0,
            submitUri: null,
            file: file,
            baseUrl: config.baseUrl,
            sasToken: config.sasToken,
            fileUrl: config.baseUrl + config.sasToken,
            progress: config.progress,
            complete: config.complete,
            error: config.error,
            cancelled: false
        };
    }
    /**
     * @param {?} config
     * @return {?}
     */
    upload(config) {
        /** @type {?} */
        const state = this.initializeState(config);
        /** @type {?} */
        const reader = new FileReader();
        reader.onloadend = (evt) => {
            if (evt.target.readyState === 2 && !state.cancelled) {
                /** @type {?} */
                const uri = state.fileUrl + '&comp=block&blockid=' + state.blockIds[state.blockIds.length - 1];
                /** @type {?} */
                const requestData = evt.target.result;
                /** @type {?} */
                const requestData2 = new Uint8Array(evt.target.result);
                /** @type {?} */
                const headers = new HttpHeaders({ 'x-ms-blob-type': 'BlockBlob', 'Content-Type': 'application/octet-stream' });
                this.http.put(uri, requestData, { headers: headers, responseType: 'text' })
                    .subscribe(_elem => {
                    state.bytesUploaded += requestData2.length;
                    /** @type {?} */
                    const percentComplete = Math.round((state.bytesUploaded / state.file.size) * 1000) / 10;
                    if (state.progress) {
                        state.progress(percentComplete);
                    }
                    this.uploadFileInBlocks(reader, state);
                }, err => {
                    console.log({ error: err });
                    if (state.error) {
                        state.error(err);
                    }
                });
            }
        };
        this.uploadFileInBlocks(reader, state);
        return {
            cancel: () => {
                state.cancelled = true;
            }
        };
    }
    /**
     * @param {?} number
     * @param {?} length
     * @return {?}
     */
    prependZeros(number, length) {
        /** @type {?} */
        let str = '' + number;
        while (str.length < length) {
            str = '0' + str;
        }
        return str;
    }
}
BlobService.DefaultBlockSize = 1024 * 32;
BlobService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
BlobService.ctorParameters = () => [
    { type: HttpClient }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class BlobModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: BlobModule,
            providers: [
                BlobService
            ]
        };
    }
}
BlobModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    HttpClientModule
                ],
                declarations: [],
                exports: []
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { BlobService, BlobModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1henVyZS1ibG9iLXNlcnZpY2UuanMubWFwIiwic291cmNlcyI6WyJuZzovL2FuZ3VsYXItYXp1cmUtYmxvYi1zZXJ2aWNlL3NyYy9hcHAvbW9kdWxlcy9ibG9iL2Jsb2Iuc2VydmljZS50cyIsIm5nOi8vYW5ndWxhci1henVyZS1ibG9iLXNlcnZpY2Uvc3JjL2FwcC9tb2R1bGVzL2Jsb2IvYmxvYi5tb2R1bGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnXHJcbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBIZWFkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnXHJcbmltcG9ydCB7IFVwbG9hZFBhcmFtcywgVXBsb2FkQ29uZmlnIH0gZnJvbSAnLi9kZWZpbml0aW9ucydcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgQmxvYlNlcnZpY2Uge1xyXG4gIHN0YXRpYyBEZWZhdWx0QmxvY2tTaXplID0gMTAyNCAqIDMyXHJcbiAgY29uc3RydWN0b3IgKHByaXZhdGUgaHR0cDogSHR0cENsaWVudCkgeyB9XHJcbiAgZ2VuZXJhdGVCbG9iVXJsIChcclxuICAgIHBhcmFtczogVXBsb2FkUGFyYW1zLFxyXG4gICAgZmlsZW5hbWU6IHN0cmluZyxcclxuICAgIHVzZUF6dXJlU3RvcmFnZUVtdWxhdG9yID0gZmFsc2UsXHJcbiAgICBhenVyZVN0b3JhZ2VFbXVsYXRvckJhc2VVcmwgPSAnJykge1xyXG4gICAgY29uc3QgdXJsID0gdXNlQXp1cmVTdG9yYWdlRW11bGF0b3IgPyBhenVyZVN0b3JhZ2VFbXVsYXRvckJhc2VVcmwgOiBgaHR0cHM6Ly8ke3BhcmFtcy5zdG9yYWdlQWNjb3VudH0uYmxvYi5jb3JlLndpbmRvd3MubmV0YFxyXG4gICAgcmV0dXJuIGAke3VybH0vJHtwYXJhbXMuY29udGFpbmVyTmFtZX0vJHtmaWxlbmFtZX1gXHJcbiAgfVxyXG4gIHByaXZhdGUgdXBsb2FkRmlsZUluQmxvY2tzIChyZWFkZXIsIHN0YXRlKSB7XHJcbiAgICAgIGlmICghc3RhdGUuY2FuY2VsbGVkKSB7XHJcbiAgICAgICAgICBpZiAoc3RhdGUudG90YWxCeXRlc1JlbWFpbmluZyA+IDApIHtcclxuICAgICAgICAgICAgICBjb25zdCBmaWxlQ29udGVudCA9IHN0YXRlLmZpbGUuc2xpY2Uoc3RhdGUuY3VycmVudEZpbGVQb2ludGVyLCBzdGF0ZS5jdXJyZW50RmlsZVBvaW50ZXIgKyBzdGF0ZS5tYXhCbG9ja1NpemUpXHJcbiAgICAgICAgICAgICAgY29uc3QgYmxvY2tJZCA9IHN0YXRlLmJsb2NrSWRQcmVmaXggKyB0aGlzLnByZXBlbmRaZXJvcyhzdGF0ZS5ibG9ja0lkcy5sZW5ndGgsIDYpXHJcbiAgICAgICAgICAgICAgc3RhdGUuYmxvY2tJZHMucHVzaChidG9hKGJsb2NrSWQpKVxyXG4gICAgICAgICAgICAgIHJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihmaWxlQ29udGVudClcclxuICAgICAgICAgICAgICBzdGF0ZS5jdXJyZW50RmlsZVBvaW50ZXIgKz0gc3RhdGUubWF4QmxvY2tTaXplXHJcbiAgICAgICAgICAgICAgc3RhdGUudG90YWxCeXRlc1JlbWFpbmluZyAtPSBzdGF0ZS5tYXhCbG9ja1NpemVcclxuICAgICAgICAgICAgICBpZiAoc3RhdGUudG90YWxCeXRlc1JlbWFpbmluZyA8IHN0YXRlLm1heEJsb2NrU2l6ZSkge1xyXG4gICAgICAgICAgICAgICAgICBzdGF0ZS5tYXhCbG9ja1NpemUgPSBzdGF0ZS50b3RhbEJ5dGVzUmVtYWluaW5nXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICB0aGlzLmNvbW1pdEJsb2NrTGlzdChzdGF0ZSlcclxuICAgICAgICAgIH1cclxuICAgICAgfVxyXG4gIH1cclxuICBwcml2YXRlIGNvbW1pdEJsb2NrTGlzdCAoc3RhdGUpIHtcclxuICAgICAgY29uc3QgdXJpID0gc3RhdGUuZmlsZVVybCArICcmY29tcD1ibG9ja2xpc3QnXHJcbiAgICAgIGNvbnN0IGhlYWRlcnMgPSBuZXcgSHR0cEhlYWRlcnMoeyAneC1tcy1ibG9iLWNvbnRlbnQtdHlwZSc6IHN0YXRlLmZpbGUudHlwZSB9KVxyXG4gICAgICBsZXQgcmVxdWVzdEJvZHkgPSAnPD94bWwgdmVyc2lvbj1cXCcxLjBcXCcgZW5jb2Rpbmc9XFwndXRmLThcXCc/PjxCbG9ja0xpc3Q+J1xyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0YXRlLmJsb2NrSWRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICByZXF1ZXN0Qm9keSArPSAnPExhdGVzdD4nICsgc3RhdGUuYmxvY2tJZHNbaV0gKyAnPC9MYXRlc3Q+J1xyXG4gICAgICB9XHJcbiAgICAgIHJlcXVlc3RCb2R5ICs9ICc8L0Jsb2NrTGlzdD4nXHJcblxyXG4gICAgICB0aGlzLmh0dHAucHV0KHVyaSwgcmVxdWVzdEJvZHksIHsgaGVhZGVyczogaGVhZGVycywgcmVzcG9uc2VUeXBlOiAndGV4dCcgfSlcclxuICAgICAgICAuc3Vic2NyaWJlKF9lbGVtID0+IHtcclxuICAgICAgICAgIGlmIChzdGF0ZS5jb21wbGV0ZSkge1xyXG4gICAgICAgICAgICBzdGF0ZS5jb21wbGV0ZSgpXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSwgZXJyID0+IHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKHsgZXJyb3I6IGVyciB9KVxyXG4gICAgICAgICAgaWYgKHN0YXRlLmVycm9yKSB7XHJcbiAgICAgICAgICAgIHN0YXRlLmVycm9yKGVycilcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gIH1cclxuICBwcml2YXRlIGluaXRpYWxpemVTdGF0ZSAoY29uZmlnOiBVcGxvYWRDb25maWcpIHtcclxuICAgICAgbGV0IGJsb2NrU2l6ZSA9IEJsb2JTZXJ2aWNlLkRlZmF1bHRCbG9ja1NpemVcclxuICAgICAgaWYgKGNvbmZpZy5ibG9ja1NpemUpIHtcclxuICAgICAgICBibG9ja1NpemUgPSBjb25maWcuYmxvY2tTaXplXHJcbiAgICAgIH1cclxuICAgICAgbGV0IG1heEJsb2NrU2l6ZSA9IGJsb2NrU2l6ZVxyXG4gICAgICBsZXQgbnVtYmVyT2ZCbG9ja3MgPSAxXHJcbiAgICAgIGNvbnN0IGZpbGUgPSBjb25maWcuZmlsZVxyXG4gICAgICBjb25zdCBmaWxlU2l6ZSA9IGZpbGUuc2l6ZVxyXG4gICAgICBpZiAoZmlsZVNpemUgPCBibG9ja1NpemUpIHtcclxuICAgICAgICAgIG1heEJsb2NrU2l6ZSA9IGZpbGVTaXplXHJcbiAgICAgIH1cclxuICAgICAgaWYgKGZpbGVTaXplICUgbWF4QmxvY2tTaXplID09PSAwKSB7XHJcbiAgICAgICAgICBudW1iZXJPZkJsb2NrcyA9IGZpbGVTaXplIC8gbWF4QmxvY2tTaXplXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBudW1iZXJPZkJsb2NrcyA9IGZpbGVTaXplIC8gbWF4QmxvY2tTaXplICsgMVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgbWF4QmxvY2tTaXplOiBtYXhCbG9ja1NpemUsIC8vIEVhY2ggZmlsZSB3aWxsIGJlIHNwbGl0IGluIDI1NiBLQi5cclxuICAgICAgICAgIG51bWJlck9mQmxvY2tzOiBudW1iZXJPZkJsb2NrcyxcclxuICAgICAgICAgIHRvdGFsQnl0ZXNSZW1haW5pbmc6IGZpbGVTaXplLFxyXG4gICAgICAgICAgY3VycmVudEZpbGVQb2ludGVyOiAwLFxyXG4gICAgICAgICAgYmxvY2tJZHM6IG5ldyBBcnJheSgpLFxyXG4gICAgICAgICAgYmxvY2tJZFByZWZpeDogJ2Jsb2NrLScsXHJcbiAgICAgICAgICBieXRlc1VwbG9hZGVkOiAwLFxyXG4gICAgICAgICAgc3VibWl0VXJpOiBudWxsLFxyXG4gICAgICAgICAgZmlsZTogZmlsZSxcclxuICAgICAgICAgIGJhc2VVcmw6IGNvbmZpZy5iYXNlVXJsLFxyXG4gICAgICAgICAgc2FzVG9rZW46IGNvbmZpZy5zYXNUb2tlbixcclxuICAgICAgICAgIGZpbGVVcmw6IGNvbmZpZy5iYXNlVXJsICsgY29uZmlnLnNhc1Rva2VuLFxyXG4gICAgICAgICAgcHJvZ3Jlc3M6IGNvbmZpZy5wcm9ncmVzcyxcclxuICAgICAgICAgIGNvbXBsZXRlOiBjb25maWcuY29tcGxldGUsXHJcbiAgICAgICAgICBlcnJvcjogY29uZmlnLmVycm9yLFxyXG4gICAgICAgICAgY2FuY2VsbGVkOiBmYWxzZVxyXG4gICAgICB9XHJcbiAgfVxyXG4gIHVwbG9hZCAoY29uZmlnOiBVcGxvYWRDb25maWcpIHtcclxuICAgIGNvbnN0IHN0YXRlID0gdGhpcy5pbml0aWFsaXplU3RhdGUoY29uZmlnKVxyXG4gICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKVxyXG4gICAgcmVhZGVyLm9ubG9hZGVuZCA9IChldnQ6IGFueSkgPT4ge1xyXG4gICAgICBpZiAoZXZ0LnRhcmdldC5yZWFkeVN0YXRlID09PSAyICYmICFzdGF0ZS5jYW5jZWxsZWQpIHtcclxuICAgICAgICBjb25zdCB1cmkgPSBzdGF0ZS5maWxlVXJsICsgJyZjb21wPWJsb2NrJmJsb2NraWQ9JyArIHN0YXRlLmJsb2NrSWRzW3N0YXRlLmJsb2NrSWRzLmxlbmd0aCAtIDFdXHJcbiAgICAgICAgY29uc3QgcmVxdWVzdERhdGEgPSBldnQudGFyZ2V0LnJlc3VsdFxyXG4gICAgICAgIGNvbnN0IHJlcXVlc3REYXRhMiA9IG5ldyBVaW50OEFycmF5KGV2dC50YXJnZXQucmVzdWx0KVxyXG4gICAgICAgIGNvbnN0IGhlYWRlcnMgPSBuZXcgSHR0cEhlYWRlcnMoeyAneC1tcy1ibG9iLXR5cGUnOiAnQmxvY2tCbG9iJywgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nIH0pXHJcbiAgICAgICAgdGhpcy5odHRwLnB1dCh1cmksIHJlcXVlc3REYXRhLCB7IGhlYWRlcnM6IGhlYWRlcnMsIHJlc3BvbnNlVHlwZTogJ3RleHQnIH0pXHJcbiAgICAgICAgICAuc3Vic2NyaWJlKF9lbGVtID0+IHtcclxuICAgICAgICAgICAgc3RhdGUuYnl0ZXNVcGxvYWRlZCArPSByZXF1ZXN0RGF0YTIubGVuZ3RoXHJcbiAgICAgICAgICAgIGNvbnN0IHBlcmNlbnRDb21wbGV0ZSA9IE1hdGgucm91bmQoKHN0YXRlLmJ5dGVzVXBsb2FkZWQgLyBzdGF0ZS5maWxlLnNpemUpICogMTAwMCkgLyAxMFxyXG4gICAgICAgICAgICBpZiAoc3RhdGUucHJvZ3Jlc3MpIHtcclxuICAgICAgICAgICAgICBzdGF0ZS5wcm9ncmVzcyhwZXJjZW50Q29tcGxldGUpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMudXBsb2FkRmlsZUluQmxvY2tzKHJlYWRlciwgc3RhdGUpXHJcbiAgICAgICAgICB9LCBlcnIgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyh7IGVycm9yOiBlcnIgfSlcclxuICAgICAgICAgICAgaWYgKHN0YXRlLmVycm9yKSB7XHJcbiAgICAgICAgICAgICAgc3RhdGUuZXJyb3IoZXJyKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLnVwbG9hZEZpbGVJbkJsb2NrcyhyZWFkZXIsIHN0YXRlKVxyXG5cclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIGNhbmNlbDogKCkgPT4ge1xyXG4gICAgICAgICAgICAgIHN0YXRlLmNhbmNlbGxlZCA9IHRydWVcclxuICAgICAgICAgIH1cclxuICAgICAgfVxyXG4gIH1cclxuICBwcml2YXRlIHByZXBlbmRaZXJvcyAobnVtYmVyLCBsZW5ndGgpIHtcclxuICAgIGxldCBzdHIgPSAnJyArIG51bWJlclxyXG4gICAgd2hpbGUgKHN0ci5sZW5ndGggPCBsZW5ndGgpIHtcclxuICAgICAgc3RyID0gJzAnICsgc3RyXHJcbiAgICB9XHJcbiAgICByZXR1cm4gc3RyXHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IE5nTW9kdWxlLCBNb2R1bGVXaXRoUHJvdmlkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSdcclxuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJ1xyXG5pbXBvcnQgeyBIdHRwQ2xpZW50TW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnXHJcblxyXG5pbXBvcnQgeyBCbG9iU2VydmljZSB9IGZyb20gJy4vYmxvYi5zZXJ2aWNlJ1xyXG5leHBvcnQgeyBCbG9iU2VydmljZSB9IGZyb20gJy4vYmxvYi5zZXJ2aWNlJ1xyXG5leHBvcnQgeyBVcGxvYWRDb25maWcsIFVwbG9hZFBhcmFtcyB9IGZyb20gJy4vZGVmaW5pdGlvbnMnXHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGltcG9ydHM6IFtcclxuICAgIENvbW1vbk1vZHVsZSxcclxuICAgIEh0dHBDbGllbnRNb2R1bGVcclxuICBdLFxyXG4gIGRlY2xhcmF0aW9uczogW10sXHJcbiAgZXhwb3J0czogW11cclxufSlcclxuZXhwb3J0IGNsYXNzIEJsb2JNb2R1bGUge1xyXG4gIHN0YXRpYyBmb3JSb290KCk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgbmdNb2R1bGU6IEJsb2JNb2R1bGUsXHJcbiAgICAgIHByb3ZpZGVyczogW1xyXG4gICAgICAgIEJsb2JTZXJ2aWNlXHJcbiAgICAgIF1cclxuICAgIH1cclxuICB9XHJcbn1cclxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7Ozs7SUFNRSxZQUFxQixJQUFnQjtRQUFoQixTQUFJLEdBQUosSUFBSSxDQUFZO0tBQUs7Ozs7Ozs7O0lBQzFDLGVBQWUsQ0FDYixNQUFvQixFQUNwQixRQUFnQixFQUNoQix1QkFBdUIsR0FBRyxLQUFLLEVBQy9CLDJCQUEyQixHQUFHLEVBQUU7O1FBQ2hDLE1BQU0sR0FBRyxHQUFHLHVCQUF1QixHQUFH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