{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../src/database-deprecated/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { Subscription, Scheduler, queueScheduler as queue } from 'rxjs';\nimport { DataSnapshot, AFUnwrappedDataSnapshot, PathReference, DatabaseReference } from './interfaces';\nimport { FirebaseDatabase } from '@angular/fire';\n\nconst REGEX_ABSOLUTE_URL = /^[a-z]+:\\/\\/.*/;\n\nexport function isNil(obj: any): boolean {\n  return obj === undefined || obj === null;\n}\n\nexport function hasKey(obj: Object, key: string): boolean {\n  return obj && obj[key] !== undefined;\n}\n\nexport function isString(value: any): boolean {\n  return typeof value === 'string';\n}\n\nexport function isFirebaseRef(value: any): boolean {\n  return typeof value.set === 'function';\n}\n\nexport function isFirebaseDataSnapshot(value: any): boolean {\n  return typeof value.exportVal === 'function';\n}\n\nexport function isAFUnwrappedSnapshot(value: any): boolean {\n  return typeof value.$key === 'string';\n}\n\nexport function isFirebaseQuery(value: any): boolean {\n  return typeof value.orderByChild === 'function';\n}\n\nexport function isEmptyObject(obj: Object): boolean {\n  if (isNil(obj)) { return false; }\n  return Object.keys(obj).length === 0 && JSON.stringify(obj) === JSON.stringify({});\n}\n\nexport interface CheckUrlRef {\n  isUrl: () => any;\n  isRef: () => any;\n  isQuery?: () => any;\n}\n\n/**\n * Unwraps the data returned in the DataSnapshot. Exposes the DataSnapshot key and exists methods through the $key and $exists properties respectively. If the value is primitive, it is unwrapped using a $value property. The $ properies mean they cannot be saved in the Database as those characters are invalid.\n * @param {DataSnapshot} snapshot - The snapshot to unwrap\n * @return AFUnwrappedDataSnapshot\n * @example\n * unwrapMapFn(snapshot) => { name: 'David', $key: 'david', $exists: Function }\n */\nexport function unwrapMapFn (snapshot:DataSnapshot): AFUnwrappedDataSnapshot {\n  var unwrapped = !isNil(snapshot.val()) ? snapshot.val() : { $value: null };\n  if ((/string|number|boolean/).test(typeof unwrapped)) {\n    unwrapped = {\n      $value: unwrapped\n    };\n  }\n  Object.defineProperty(unwrapped, '$key', {\n    value: snapshot.ref.key,\n    enumerable: false\n  });\n  Object.defineProperty(unwrapped, '$exists', {\n    value: () => {\n      return snapshot.exists();\n    },\n    enumerable: false\n  });\n  return unwrapped;\n}\n\nexport function stripTrailingSlash(value: string): string {\n  // Is the last char a /\n  if (value.substring(value.length - 1, value.length) === '/') {\n    return value.substring(0, value.length - 1);\n  } else {\n    return value;\n  }\n}\n\nfunction getAbsUrl(root: string, url:string) {\n  if (!(/^[a-z]+:\\/\\/.*/.test(url))) {\n    // Provided url is relative.\n    // Strip any leading slash\n    url = root + '/' + stripLeadingSlash(url);\n  }\n  return url;\n}\n\nexport function stripLeadingSlash(value: string): string {\n  // Is the last char a /\n  if (value.substring(0, 1) === '/') {\n    return value.substring(1, value.length);\n  } else {\n    return value;\n  }\n}\n\nexport function isAbsoluteUrl(url: string) {\n  return REGEX_ABSOLUTE_URL.test(url);\n}\n\n/**\n * Returns a database reference given a Firebase App and an\n * absolute or relative path.\n * @param app - Firebase App\n * @param path - Database path, relative or absolute\n */\nexport function getRef(database: FirebaseDatabase, pathRef: PathReference): DatabaseReference {\n  // if a db ref was passed in, just return it\n  if(isFirebaseRef(pathRef)) {\n    return pathRef as DatabaseReference;\n  }\n\n  const path = pathRef as string;\n  if(isAbsoluteUrl(<string>pathRef)) {\n    return database.refFromURL(path);\n  }\n  return database.ref(path);\n}\n"]}