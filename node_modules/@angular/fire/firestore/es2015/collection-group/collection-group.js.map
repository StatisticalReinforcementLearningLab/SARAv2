{"version":3,"file":"collection-group.js","sourceRoot":"","sources":["../../../../../src/firestore/collection-group/collection-group.ts"],"names":[],"mappings":"AAAA,OAAO,EAAc,IAAI,EAAE,MAAM,MAAM,CAAC;AACxC,OAAO,EAAE,iBAAiB,EAAE,MAAM,uBAAuB,CAAC;AAC1D,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,gBAAgB,CAAC;AAInD,OAAO,EAAE,mBAAmB,EAAE,MAAM,0BAA0B,CAAC;AAC/D,OAAO,EAAE,UAAU,EAAE,aAAa,EAAE,MAAM,uBAAuB,CAAC;AAElE,OAAO,EAAE,SAAS,EAAE,MAAM,eAAe,CAAC;AAoB1C,MAAM,OAAO,+BAA+B;IAO1C,YACmB,KAAY,EACZ,GAAqB;QADrB,UAAK,GAAL,KAAK,CAAO;QACZ,QAAG,GAAH,GAAG,CAAkB;IAAI,CAAC;IAQ7C,YAAY,CAAC,MAA6B;QACxC,IAAG,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;YACjC,OAAO,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,sBAAsB,CAC9C,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,iBAAiB,CAClC,UAAU,CAAI,IAAI,CAAC,KAAK,CAAC,CAC1B,CACF,CAAC;SACH;QACD,OAAO,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,sBAAsB,CAC5C,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,iBAAiB,CAClC,UAAU,CAAI,IAAI,CAAC,KAAK,CAAC,CAC1B,CACF;aACA,IAAI,CACH,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAC1E,MAAM,CAAC,OAAO,CAAC,EAAE,CAAE,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CACvC,CAAC;IACN,CAAC;IAOD,UAAU,CAAC,MAA6B;QACtC,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC,GAAG,OAAO,EAAE,GAAG,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;IAChG,CAAC;IAOD,eAAe,CAAC,MAA6B;QAC3C,MAAM,eAAe,GAAG,mBAAmB,CAAC,MAAM,CAAC,CAAC;QACpD,MAAM,cAAc,GAAG,aAAa,CAAI,IAAI,CAAC,KAAK,EAAE,eAAe,CAAC,CAAC;QACrE,MAAM,uBAAuB,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAC;QACrF,OAAO,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,sBAAsB,CAAC,uBAAuB,CAAC,CAAC;IAC5E,CAAC;IAKD,YAAY;QACV,MAAM,kBAAkB,GAAG,iBAAiB,CAAI,IAAI,CAAC,KAAK,CAAC,CAAC;QAC5D,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,CAAC;QAC5E,OAAO,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,sBAAsB,CAAC,UAAU,CAAC;aACzD,IAAI,CACH,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CACxD,CAAC;IACN,CAAC;IAMD,GAAG,CAAC,OAA8B;QAChC,OAAO,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CACvC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,CACnC,CAAC;IACJ,CAAC;CAEF","sourcesContent":["import { Observable, from } from 'rxjs';\nimport { fromCollectionRef } from '../observable/fromRef';\nimport { map, filter, scan } from 'rxjs/operators';\nimport { firestore } from 'firebase/app';\n\nimport { DocumentChangeType, CollectionReference, Query, DocumentReference, DocumentData, DocumentChangeAction } from '../interfaces';\nimport { validateEventsArray } from '../collection/collection';\nimport { docChanges, sortedChanges } from '../collection/changes';\nimport { AngularFirestore } from '../firestore';\nimport { runInZone } from '@angular/fire';\n\n/**\n * AngularFirestoreCollectionGroup service\n *\n * This class holds a reference to a Firestore Collection Group Query.\n *\n * This class uses Symbol.observable to transform into Observable using Observable.from().\n *\n * This class is rarely used directly and should be created from the AngularFirestore service.\n *\n * Example:\n *\n * const collectionGroup = firebase.firestore.collectionGroup('stocks');\n * const query = collectionRef.where('price', '>', '0.01');\n * const fakeStock = new AngularFirestoreCollectionGroup<Stock>(query, afs);\n *\n * // Subscribe to changes as snapshots. This provides you data updates as well as delta updates.\n * fakeStock.valueChanges().subscribe(value => console.log(value));\n */\nexport class AngularFirestoreCollectionGroup<T=DocumentData> {\n  /**\n   * The constructor takes in a CollectionGroupQuery to provide wrapper methods\n   * for data operations and data streaming.\n   * @param query\n   * @param afs\n   */\n  constructor(\n    private readonly query: Query,\n    private readonly afs: AngularFirestore) { }\n\n  /**\n   * Listen to the latest change in the stream. This method returns changes\n   * as they occur and they are not sorted by query order. This allows you to construct\n   * your own data structure.\n   * @param events\n   */\n  stateChanges(events?: DocumentChangeType[]): Observable<DocumentChangeAction<T>[]> {\n    if(!events || events.length === 0) {\n      return this.afs.scheduler.keepUnstableUntilFirst(\n        this.afs.scheduler.runOutsideAngular(\n          docChanges<T>(this.query)\n        )\n      );\n    }\n    return this.afs.scheduler.keepUnstableUntilFirst(\n        this.afs.scheduler.runOutsideAngular(\n          docChanges<T>(this.query)\n        )\n      )\n      .pipe(\n        map(actions => actions.filter(change => events.indexOf(change.type) > -1)),\n        filter(changes =>  changes.length > 0)\n      );\n  }\n\n  /**\n   * Create a stream of changes as they occur it time. This method is similar to stateChanges()\n   * but it collects each event in an array over time.\n   * @param events\n   */\n  auditTrail(events?: DocumentChangeType[]): Observable<DocumentChangeAction<T>[]> {\n    return this.stateChanges(events).pipe(scan((current, action) => [...current, ...action], []));\n  }\n\n  /**\n   * Create a stream of synchronized changes. This method keeps the local array in sorted\n   * query order.\n   * @param events\n   */\n  snapshotChanges(events?: DocumentChangeType[]): Observable<DocumentChangeAction<T>[]> {\n    const validatedEvents = validateEventsArray(events);\n    const sortedChanges$ = sortedChanges<T>(this.query, validatedEvents);\n    const scheduledSortedChanges$ = this.afs.scheduler.runOutsideAngular(sortedChanges$);\n    return this.afs.scheduler.keepUnstableUntilFirst(scheduledSortedChanges$);\n  }\n\n  /**\n   * Listen to all documents in the collection and its possible query as an Observable.\n   */\n  valueChanges(): Observable<T[]> {\n    const fromCollectionRef$ = fromCollectionRef<T>(this.query);\n    const scheduled$ = this.afs.scheduler.runOutsideAngular(fromCollectionRef$);\n    return this.afs.scheduler.keepUnstableUntilFirst(scheduled$)\n      .pipe(\n        map(actions => actions.payload.docs.map(a => a.data()))\n      );\n  }\n\n  /**\n   * Retrieve the results of the query once. \n   * @param options \n   */\n  get(options?: firestore.GetOptions) {\n    return from(this.query.get(options)).pipe(\n      runInZone(this.afs.scheduler.zone)\n    );\n  }\n\n}\n"]}