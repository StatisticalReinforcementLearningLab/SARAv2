{"version":3,"file":"builder.js","sourceRoot":"","sources":["../../../../src/schematics/deploy/builder.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,yDAImC;AACnC,oDAA2D;AAC3D,uCAA+B;AAC/B,+CAAqE;AACrE,oCAAkD;AAIlD,kBAAe,yBAAa,CAC1B,CAAO,CAAM,EAAE,OAAuB,EAA0B,EAAE;IAEhE,MAAM,IAAI,GAAG,gBAAS,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;IAC9C,MAAM,SAAS,GAAG,IAAI,mBAAY,CAAC,SAAS,CAAC,SAAS,CACpD,IAAI,EACJ,IAAI,qBAAc,EAAE,CACrB,CAAC;IACF,MAAM,SAAS;SACZ,qBAAqB,CAAC,gBAAS,CAAC,cAAc,CAAC,CAAC;SAChD,SAAS,EAAE,CAAC;IAEf,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;QACnB,MAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAC;KACnE;IAED,MAAM,OAAO,GAAG,SAAS,CAAC,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAE7D,MAAM,eAAe,GAAG,8BAAsB,CAC5C,SAAS,CAAC,IAAI,EACd,OAAO,CAAC,MAAM,CAAC,OAAO,CACvB,CAAC;IAEF,IAAI;QACF,MAAM,iBAAM,CACV,OAAO,CAAC,gBAAgB,CAAC,EACzB,OAAO,EACP,WAAI,CAAC,SAAS,CAAC,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,EAClC,eAAe,CAChB,CAAC;KACH;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,CAAC,KAAK,CAAC,+BAA+B,CAAC,CAAC;QAC/C,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;QACzB,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;KAC3B;IAED,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;AAC3B,CAAC,CAAA,CACF,CAAC","sourcesContent":["import {\n  BuilderContext,\n  BuilderOutput,\n  createBuilder\n} from \"@angular-devkit/architect\";\nimport { NodeJsSyncHost } from \"@angular-devkit/core/node\";\nimport deploy from \"./actions\";\nimport { experimental, join, normalize } from \"@angular-devkit/core\";\nimport { getFirebaseProjectName } from \"../utils\";\n\n// Call the createBuilder() function to create a builder. This mirrors\n// createJobHandler() but add typings specific to Architect Builders.\nexport default createBuilder<any>(\n  async (_: any, context: BuilderContext): Promise<BuilderOutput> => {\n    // The project root is added to a BuilderContext.\n    const root = normalize(context.workspaceRoot);\n    const workspace = new experimental.workspace.Workspace(\n      root,\n      new NodeJsSyncHost()\n    );\n    await workspace\n      .loadWorkspaceFromHost(normalize(\"angular.json\"))\n      .toPromise();\n\n    if (!context.target) {\n      throw new Error(\"Cannot deploy the application without a target\");\n    }\n\n    const project = workspace.getProject(context.target.project);\n\n    const firebaseProject = getFirebaseProjectName(\n      workspace.root,\n      context.target.project\n    );\n\n    try {\n      await deploy(\n        require(\"firebase-tools\"),\n        context,\n        join(workspace.root, project.root),\n        firebaseProject\n      );\n    } catch (e) {\n      console.error(\"Error when trying to deploy: \");\n      console.error(e.message);\n      return { success: false };\n    }\n\n    return { success: true };\n  }\n);\n"]}