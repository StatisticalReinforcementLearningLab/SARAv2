{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../src/schematics/utils.ts"],"names":[],"mappings":";;AAAA,2BAAkC;AAElC,+BAA4B;AAE5B,SAAgB,YAAY;IAC1B,MAAM,QAAQ,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;IAC3C,OAAO,QAAQ,CAAC,IAAI,EAAE,CAAC,KAAK,CAE1B,GAAG,EAAE,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CACnD,CAAC;AACJ,CAAC;AAND,oCAMC;AAID,MAAM,SAAS,GAAG,CAAC,IAAqC,EAAmB,EAAE;IAC3E,OAA+B,IAAK,CAAC,QAAQ,KAAK,SAAS,CAAC;AAC9D,CAAC,CAAC;;;AAEF,MAAM,cAAc,GAAG,CAAC,QAAmB,EAAE,EAAE;IAC7C,OAAO,CAAC,CAAM,EAAE,KAAa,EAAE,EAAE;QAC/B,OAAO,OAAO,CAAC,OAAO,CACpB,OAAO,CAAC,OAAO,CAAC;aACb,MAAM,CAAC,KAAK,EAAE,QAAQ,EAAE;YACvB,OAAO,CAAC,EAAW;gBACjB,OAAO,GAAG,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,UAAU,EAAE,CAAC;YAChD,CAAC;SACF,CAAC;aACD,GAAG,CAAC,CAAC,MAAuC,EAAE,EAAE;YAC/C,IAAI,QAAiB,CAAC;YACtB,IAAI,SAAS,CAAC,MAAM,CAAC,EAAE;gBACrB,QAAQ,GAAG,MAAM,CAAC;aACnB;iBAAM;gBACL,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;aAC5B;YACD,OAAO;gBACL,IAAI,EAAE,GAAG,QAAQ,CAAC,EAAE,KAAK,QAAQ,CAAC,IAAI,GAAG;gBACzC,KAAK,EAAE,QAAQ,CAAC,IAAI;gBACpB,KAAK,EAAE,QAAQ,CAAC,EAAE;aACnB,CAAC;QACJ,CAAC,CAAC,CACL,CAAC;IACJ,CAAC,CAAC;AACJ,CAAC,CAAC;;;AAEW,QAAA,aAAa,GAAG,CAAC,QAAmB,EAAE,EAAE;IACnD,MAAM,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;IACrC,QAAQ,CAAC,cAAc,CACrB,cAAc,EACd,OAAO,CAAC,8BAA8B,CAAC,CACxC,CAAC;IACF,OAAO,QAAQ,CAAC,MAAM,CAAC;QACrB,IAAI,EAAE,cAAc;QACpB,IAAI,EAAE,iBAAiB;QACvB,MAAM,EAAE,cAAc,CAAC,QAAQ,CAAC;QAChC,OAAO,EAAE,0BAA0B;KACpC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,SAAgB,sBAAsB,CACpC,WAAmB,EACnB,MAAc;IAEd,MAAM,EAAE,OAAO,EAAE,GAAe,IAAI,CAAC,KAAK,CACxC,iBAAY,CAAC,WAAI,CAAC,WAAW,EAAE,aAAa,CAAC,EAAE,OAAO,CAAC,CACxD,CAAC;IACF,MAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,OAAQ,CAAC,CAAC;IACvC,OAAO,QAAQ,CAAC,IAAI,CAClB,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,OAAQ,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,MAAM,CAAC,CAC5E,CAAC;AACJ,CAAC;AAXD,wDAWC","sourcesContent":["import { readFileSync } from \"fs\";\nimport { FirebaseRc, Project } from \"./interfaces\";\nimport { join } from \"path\";\n\nexport function listProjects() {\n  const firebase = require('firebase-tools');\n  return firebase.list().catch(\n    /* If list failed, then login and try again. */\n    () => firebase.login().then(() => firebase.list())\n  );\n}\n\n// `fuzzy` passes either the original list of projects or an internal object\n// which contains the project as a property.\nconst isProject = (elem: Project | { original: Project }): elem is Project => {\n  return (<{ original: Project }>elem).original === undefined;\n};\n\nconst searchProjects = (projects: Project[]) => {\n  return (_: any, input: string) => {\n    return Promise.resolve(\n      require('fuzzy')\n        .filter(input, projects, {\n          extract(el: Project) {\n            return `${el.id} ${el.name} ${el.permission}`;\n          }\n        })\n        .map((result: Project | { original: Project }) => {\n          let original: Project;\n          if (isProject(result)) {\n            original = result;\n          } else {\n            original = result.original;\n          }\n          return {\n            name: `${original.id} (${original.name})`,\n            title: original.name,\n            value: original.id\n          };\n        })\n    );\n  };\n};\n\nexport const projectPrompt = (projects: Project[]) => {\n  const inquirer = require('inquirer');\n  inquirer.registerPrompt(\n    \"autocomplete\",\n    require(\"inquirer-autocomplete-prompt\")\n  );\n  return inquirer.prompt({\n    type: \"autocomplete\",\n    name: \"firebaseProject\",\n    source: searchProjects(projects),\n    message: \"Please select a project:\"\n  });\n};\n\nexport function getFirebaseProjectName(\n  projectRoot: string,\n  target: string\n): string | undefined {\n  const { targets }: FirebaseRc = JSON.parse(\n    readFileSync(join(projectRoot, \".firebaserc\"), \"UTF-8\")\n  );\n  const projects = Object.keys(targets!);\n  return projects.find(\n    project => !!Object.keys(targets![project].hosting).find(t => t === target)\n  );\n}\n"]}