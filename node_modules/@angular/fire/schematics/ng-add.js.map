{"version":3,"file":"ng-add.js","sourceRoot":"","sources":["../../../src/schematics/ng-add.ts"],"names":[],"mappings":"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","sourcesContent":["import { SchematicsException, Tree, SchematicContext } from '@angular-devkit/schematics';\nimport { NodePackageInstallTask, RunSchematicTask } from '@angular-devkit/schematics/tasks';\nimport { FirebaseJSON, FirebaseRc, FirebaseHostingConfig } from './interfaces';\nimport { experimental, JsonParseMode, parseJson } from '@angular-devkit/core';\nimport { from } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { Project } from './interfaces';\nimport { listProjects, projectPrompt } from './utils';\nimport { dependencies as requiredDependencyVersions, devDependencies as requiredDevDependencyVersions } from './versions';\n\nconst stringifyFormatted = (obj: any) => JSON.stringify(obj, null, 2);\n\nfunction emptyFirebaseJson() {\n  return {\n    hosting: []\n  };\n}\n\nfunction emptyFirebaseRc() {\n  return {\n    targets: {}\n  };\n}\n\nfunction generateHostingConfig(project: string, dist: string) {\n  return {\n    target: project,\n    public: dist,\n    ignore: ['firebase.json', '**/.*', '**/node_modules/**'],\n    rewrites: [\n      {\n        source: '**',\n        destination: '/index.html'\n      }\n    ]\n  };\n}\n\nfunction safeReadJSON(path: string, tree: Tree) {\n  try {\n    return JSON.parse(tree.read(path)!.toString());\n  } catch (e) {\n    throw new SchematicsException(`Error when parsing ${path}: ${e.message}`);\n  }\n}\n\nfunction generateFirebaseJson(\n  tree: Tree,\n  path: string,\n  project: string,\n  dist: string\n) {\n  let firebaseJson: FirebaseJSON = tree.exists(path)\n    ? safeReadJSON(path, tree)\n    : emptyFirebaseJson();\n\n  if (firebaseJson.hosting &&\n    (Array.isArray(firebaseJson.hosting) &&\n      firebaseJson.hosting.find(config => config.target === project) ||\n      (<FirebaseHostingConfig>firebaseJson.hosting).target === project\n  )) {\n    throw new SchematicsException(\n      `Target ${project} already exists in firebase.json`\n    );\n  }\n\n  const newConfig = generateHostingConfig(project, dist);\n  if (firebaseJson.hosting === undefined) {\n    firebaseJson.hosting = newConfig;\n  } else if (Array.isArray(firebaseJson.hosting)) {\n    firebaseJson.hosting.push(newConfig);\n  } else {\n    firebaseJson.hosting = [firebaseJson.hosting!, newConfig];\n  }\n\n  overwriteIfExists(tree, path, stringifyFormatted(firebaseJson));\n}\n\nfunction generateFirebaseRcTarget(firebaseProject: string, project: string) {\n  return {\n    hosting: {\n      [project]: [\n        // TODO(kirjs): Generally site name is consistent with the project name, but there are edge cases.\n        firebaseProject\n      ]\n    }\n  };\n}\n\nfunction generateFirebaseRc(\n  tree: Tree,\n  path: string,\n  firebaseProject: string,\n  project: string\n) {\n  const firebaseRc: FirebaseRc = tree.exists(path)\n    ? safeReadJSON(path, tree)\n    : emptyFirebaseRc();\n\n  firebaseRc.targets = firebaseRc.targets || {};\n\n  if (firebaseProject in firebaseRc.targets!) {\n    throw new SchematicsException(\n      `Firebase project ${firebaseProject} already defined in .firebaserc`\n    );\n  }\n\n  firebaseRc.targets[firebaseProject] = generateFirebaseRcTarget(\n    firebaseProject,\n    project\n  );\n\n  overwriteIfExists(tree, path, stringifyFormatted(firebaseRc));\n}\n\nconst overwriteIfExists = (tree: Tree, path: string, content: string) => {\n  if (tree.exists(path)) tree.overwrite(path, content);\n  else tree.create(path, content);\n};\n\nfunction getWorkspace(\n  host: Tree\n): { path: string; workspace: experimental.workspace.WorkspaceSchema } {\n  const possibleFiles = ['/angular.json', '/.angular.json'];\n  const path = possibleFiles.filter(path => host.exists(path))[0];\n\n  const configBuffer = host.read(path);\n  if (configBuffer === null) {\n    throw new SchematicsException(`Could not find angular.json`);\n  }\n  const content = configBuffer.toString();\n\n  let workspace: experimental.workspace.WorkspaceSchema;\n  try {\n    workspace = (parseJson(\n      content,\n      JsonParseMode.Loose\n    ) as {}) as experimental.workspace.WorkspaceSchema;\n  } catch (e) {\n    throw new SchematicsException(`Could not parse angular.json: ` + e.message);\n  }\n\n  return {\n    path,\n    workspace\n  };\n}\n\ninterface NgAddOptions {\n  firebaseProject: string;\n  project?: string;\n}\n\ninterface DeployOptions {\n  project: string;\n}\n\n// You don't have to export the function as default. You can also have more than one rule factory\n// per file.\nexport const setupNgDeploy = ({ project }: DeployOptions) => (host: Tree) =>\n  from(listProjects()).pipe(\n    switchMap((projects: Project[]) => projectPrompt(projects)),\n    map(({ firebaseProject }: any) => setupFirebaseProject(host, { firebaseProject, project }))\n  );\n\nexport const ngAdd = (options: DeployOptions) => (host: Tree, context: SchematicContext) => {\n  const packageJson = host.exists('package.json') && safeReadJSON('package.json', host);\n\n  if (packageJson === undefined) {\n    throw new SchematicsException('Could not locate package.json');\n  }\n\n  Object.keys(requiredDependencyVersions).forEach(name => {\n    packageJson.dependencies[name] = packageJson.dependencies[name] || requiredDependencyVersions[name];\n  });\n\n  Object.keys(requiredDevDependencyVersions).forEach(name => {\n    packageJson.devDependencies[name] = packageJson.devDependencies[name] || requiredDevDependencyVersions[name];\n  });\n\n  overwriteIfExists(host, 'package.json', stringifyFormatted(packageJson));\n\n  const installTaskId = context.addTask(new NodePackageInstallTask());\n\n  context.addTask(new RunSchematicTask('ng-add-setup-firebase-deploy', options), [installTaskId]);\n}\n\nexport function setupFirebaseProject(tree: Tree, options: NgAddOptions) {\n  const { path: workspacePath, workspace } = getWorkspace(tree);\n\n  if (!options.project) {\n    if (workspace.defaultProject) {\n      options.project = workspace.defaultProject;\n    } else {\n      throw new SchematicsException(\n        'No Angular project selected and no default project in the workspace'\n      );\n    }\n  }\n\n  const project = workspace.projects[options.project];\n  if (!project) {\n    throw new SchematicsException(\n      'The specified Angular project is not defined in this workspace'\n    );\n  }\n\n  if (project.projectType !== 'application') {\n    throw new SchematicsException(\n      `Deploy requires an Angular project type of \"application\" in angular.json`\n    );\n  }\n\n  if (\n    !project.architect ||\n    !project.architect.build ||\n    !project.architect.build.options ||\n    !project.architect.build.options.outputPath\n  ) {\n    throw new SchematicsException(\n      `Cannot read the output path (architect.build.options.outputPath) of the Angular project \"${\n        options.project\n      }\" in angular.json`\n    );\n  }\n\n  const outputPath = project.architect.build.options.outputPath;\n\n  project.architect['deploy'] = {\n    builder: '@angular/fire:deploy',\n    options: {}\n  };\n\n  tree.overwrite(workspacePath, JSON.stringify(workspace, null, 2));\n  generateFirebaseJson(tree, 'firebase.json', options.project!, outputPath);\n  generateFirebaseRc(\n    tree,\n    '.firebaserc',\n    options.firebaseProject,\n    options.project!\n  );\n  return tree;\n}\n"]}