{"version":3,"file":"remove.js","sourceRoot":"","sources":["../../../../../src/database/list/remove.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,mBAAmB,EAAE,MAAM,UAAU,CAAC;AAK/C,MAAM,UAAU,kBAAkB,CAAI,GAAsB;IAC1D,OAAO,SAAS,MAAM,CAAC,IAAwB;QAC7C,IAAG,CAAC,IAAI,EAAE;YAAE,OAAO,GAAG,CAAC,MAAM,EAAE,CAAC;SAAE;QAClC,OAAO,mBAAmB,CAAC,IAAI,EAAE;YAC/B,UAAU,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,KAAK,CAAS,IAAI,CAAC,CAAC,MAAM,EAAE;YAClD,YAAY,EAAE,GAAG,EAAE,CAAqB,IAAK,CAAC,MAAM,EAAE;YACtD,YAAY,EAAE,GAAG,EAAE,CAAuB,IAAK,CAAC,GAAG,CAAC,MAAM,EAAE;SAC7D,CAAC,CAAC;IACL,CAAC,CAAA;AACH,CAAC","sourcesContent":["import { DatabaseReference, DataSnapshot, FirebaseOperation, DatabaseSnapshot } from '../interfaces';\nimport { checkOperationCases } from '../utils';\nimport { database } from 'firebase/app';\n\n// TODO(davideast): Find out why TS thinks this returns firebase.Primise\n// instead of Promise.\nexport function createRemoveMethod<T>(ref: DatabaseReference) {\n  return function remove(item?: FirebaseOperation): any {\n    if(!item) { return ref.remove(); }\n    return checkOperationCases(item, {\n      stringCase: () => ref.child(<string>item).remove(),\n      firebaseCase: () => (<DatabaseReference>item).remove(),\n      snapshotCase: () => (<DatabaseSnapshot<T>>item).ref.remove()\n    });\n  }\n}\n"]}