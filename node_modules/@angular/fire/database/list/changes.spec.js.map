{"version":3,"file":"changes.spec.js","sourceRoot":"","sources":["../../../../src/database/list/changes.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { database } from 'firebase/app';\nimport { FirebaseApp, AngularFireModule } from '@angular/fire';\nimport { AngularFireDatabase, AngularFireDatabaseModule, listChanges } from '@angular/fire/database';\nimport { TestBed, inject } from '@angular/core/testing';\nimport { COMMON_CONFIG } from '../test-config';\nimport { skip, take } from 'rxjs/operators';\n\n// generate random string to test fidelity of naming\nconst rando = () => (Math.random() + 1).toString(36).substring(7);\nconst FIREBASE_APP_NAME = rando();\n\ndescribe('listChanges', () => {\n  let app: FirebaseApp;\n  let db: AngularFireDatabase;\n  let ref: (path: string) => database.Reference;\n  let batch = {};\n  const items = [{ name: 'zero' }, { name: 'one' }, { name: 'two' }].map((item, i) => ( { key: i.toString(), ...item } ));\n  Object.keys(items).forEach(function (key, i) {\n    const itemValue = items[key];\n    batch[i] = itemValue;\n  });\n  // make batch immutable to preserve integrity\n  batch = Object.freeze(batch);\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [\n        AngularFireModule.initializeApp(COMMON_CONFIG, FIREBASE_APP_NAME),\n        AngularFireDatabaseModule\n      ]\n    });\n    inject([FirebaseApp, AngularFireDatabase], (app_: FirebaseApp, _db: AngularFireDatabase) => {\n      app = app_;\n      db = _db;\n      app.database().goOffline();\n      ref = (path: string) => { app.database().goOffline(); return app.database().ref(path); };\n    })();\n  });\n\n  afterEach(done => {\n    app.delete().then(done, done.fail);\n  });\n\n  describe('events', () => {\n\n    it('should stream value at first', (done) => {\n      const someRef = ref(rando());\n      const obs = listChanges(someRef, ['child_added']);\n      const sub = obs.pipe(take(1)).subscribe(changes => {\n        const data = changes.map(change => change.payload.val());\n        expect(data).toEqual(items);\n      }).add(done);\n      someRef.set(batch);\n    });\n\n    it('should process a new child_added event', done => {\n      const aref = ref(rando());\n      const obs = listChanges(aref, ['child_added']);\n      const sub = obs.pipe(skip(1),take(1)).subscribe(changes => {\n        const data = changes.map(change => change.payload.val());\n        expect(data[3]).toEqual({ name: 'anotha one' });\n      }).add(done);\n      aref.set(batch);\n      aref.push({ name: 'anotha one' });\n    });\n\n    it('should stream in order events', (done) => {\n      const aref = ref(rando());\n      const obs = listChanges(aref.orderByChild('name'), ['child_added']);\n      const sub = obs.pipe(take(1)).subscribe(changes => {\n        const names = changes.map(change => change.payload.val().name);\n        expect(names[0]).toEqual('one');\n        expect(names[1]).toEqual('two');\n        expect(names[2]).toEqual('zero');\n      }).add(done);\n      aref.set(batch);\n    });\n\n    it('should stream in order events w/child_added', (done) => {\n      const aref = ref(rando());\n      const obs = listChanges(aref.orderByChild('name'), ['child_added']);\n      const sub = obs.pipe(skip(1),take(1)).subscribe(changes => {\n        const names = changes.map(change => change.payload.val().name);\n        expect(names[0]).toEqual('anotha one');\n        expect(names[1]).toEqual('one');\n        expect(names[2]).toEqual('two');\n        expect(names[3]).toEqual('zero');\n      }).add(done);\n      aref.set(batch);\n      aref.push({ name: 'anotha one' });\n    });\n\n    it('should stream events filtering', (done) => {\n      const aref = ref(rando());\n      const obs = listChanges(aref.orderByChild('name').equalTo('zero'), ['child_added']);\n      obs.pipe(skip(1),take(1)).subscribe(changes => {\n        const names = changes.map(change => change.payload.val().name);\n        expect(names[0]).toEqual('zero');\n        expect(names[1]).toEqual('zero');\n      }).add(done);\n      aref.set(batch);\n      aref.push({ name: 'zero' });\n    });\n\n    it('should process a new child_removed event', done => {\n      const aref = ref(rando());\n      const obs = listChanges(aref, ['child_added','child_removed']);\n      const sub = obs.pipe(skip(1),take(1)).subscribe(changes => {\n        const data = changes.map(change => change.payload.val());\n        expect(data.length).toEqual(items.length - 1);\n      }).add(done);\n      app.database().goOnline();\n      aref.set(batch).then(() => {\n        aref.child(items[0].key).remove();\n      });\n    });\n\n    it('should process a new child_changed event', (done) => {\n      const aref = ref(rando());\n      const obs = listChanges(aref, ['child_added','child_changed'])\n      const sub = obs.pipe(skip(1),take(1)).subscribe(changes => {\n        const data = changes.map(change => change.payload.val());\n        expect(data[1].name).toEqual('lol');\n      }).add(done);\n      app.database().goOnline();\n      aref.set(batch).then(() => {\n        aref.child(items[1].key).update({ name: 'lol'});\n      });\n    });\n\n    it('should process a new child_moved event', (done) => {\n      const aref = ref(rando());\n      const obs = listChanges(aref, ['child_added','child_moved'])\n      const sub = obs.pipe(skip(1),take(1)).subscribe(changes => {\n        const data = changes.map(change => change.payload.val());\n        // We moved the first item to the last item, so we check that\n        // the new result is now the last result\n        expect(data[data.length - 1]).toEqual(items[0]);\n      }).add(done);\n      app.database().goOnline();\n      aref.set(batch).then(() => {\n        aref.child(items[0].key).setPriority('a', () => {});\n      });\n    });\n\n  });\n\n});\n"]}