{"version":3,"file":"firebase.app.module.js","sourceRoot":"","sources":["../../src/core/firebase.app.module.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,cAAc,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AAGnE,OAAO,QAAQ,MAAM,cAAc,CAAC;AAMpC,MAAM,CAAC,IAAM,oBAAoB,GAAG,IAAI,cAAc,CAAkB,0BAA0B,CAAC,CAAC;AACpG,MAAM,CAAC,IAAM,yBAAyB,GAAG,IAAI,cAAc,CAAqC,+BAA+B,CAAC,CAAA;AAWhI;IAAA;IAWA,CAAC;IAAD,kBAAC;AAAD,CAAC,AAXD,IAWC;;AAED,MAAM,UAAU,mBAAmB,CAAC,OAAwB,EAAE,YAA4C;IACtG,IAAM,IAAI,GAAG,OAAO,YAAY,KAAK,QAAQ,IAAI,YAAY,IAAI,WAAW,CAAC;IAC7E,IAAM,MAAM,GAAG,OAAO,YAAY,KAAK,QAAQ,IAAI,YAAY,IAAI,EAAE,CAAC;IACtE,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC;IAElC,IAAM,WAAW,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,IAAI,GAAG,CAAC,IAAI,KAAK,MAAM,CAAC,IAAI,EAA/B,CAA+B,CAAC,CAAC,CAAC,CAAQ,CAAC;IAG3F,OAAO,CAAC,WAAW,IAAI,QAAQ,CAAC,aAAa,CAAC,OAAO,EAAE,MAAa,CAAC,CAAgB,CAAC;AAC1F,CAAC;AAED,IAAM,mBAAmB,GAAG;IACxB,OAAO,EAAE,WAAW;IACpB,UAAU,EAAE,mBAAmB;IAC/B,IAAI,EAAE;QACF,oBAAoB;QACpB,CAAC,IAAI,QAAQ,EAAE,EAAE,yBAAyB,CAAC;KAC9C;CACJ,CAAC;AAKF;IAAA;IAUA,CAAC;0BAVY,iBAAiB;IACnB,+BAAa,GAApB,UAAqB,OAAwB,EAAE,YAAyC;QACpF,OAAO;YACH,QAAQ,EAAE,mBAAiB;YAC3B,SAAS,EAAE;gBACP,EAAE,OAAO,EAAE,oBAAoB,EAAE,QAAQ,EAAE,OAAO,EAAE;gBACpD,EAAE,OAAO,EAAE,yBAAyB,EAAE,QAAQ,EAAE,YAAY,EAAE;aACjE;SACJ,CAAA;IACL,CAAC;;IATQ,iBAAiB;QAH7B,QAAQ,CAAC;YACN,SAAS,EAAE,CAAE,mBAAmB,CAAE;SACrC,CAAC;OACW,iBAAiB,CAU7B;IAAD,wBAAC;CAAA,AAVD,IAUC;SAVY,iBAAiB","sourcesContent":["import { InjectionToken, NgModule, Optional } from '@angular/core';\nimport { auth, database, firestore, functions, messaging, storage } from 'firebase/app';\n// @ts-ignore (https://github.com/firebase/firebase-js-sdk/pull/1206)\nimport firebase from 'firebase/app'; // once fixed can pull in as \"default as firebase\" above\n\n// Public types don't expose FirebaseOptions or FirebaseAppConfig\nexport type FirebaseOptions = {[key:string]: any};\nexport type FirebaseAppConfig = {[key:string]: any};\n\nexport const FirebaseOptionsToken = new InjectionToken<FirebaseOptions>('angularfire2.app.options');\nexport const FirebaseNameOrConfigToken = new InjectionToken<string|FirebaseAppConfig|undefined>('angularfire2.app.nameOrConfig')\n\nexport type FirebaseDatabase = database.Database;\nexport type FirebaseAuth = auth.Auth;\nexport type FirebaseMessaging = messaging.Messaging;\nexport type FirebaseStorage = storage.Storage;\nexport type FirebaseFirestore = firestore.Firestore;\nexport type FirebaseFunctions = functions.Functions;\n\n// Have to implement as we need to return a class from the provider, we should consider exporting\n// this in the firebase/app types as this is our highest risk of breaks\nexport class FirebaseApp {\n    name: string;\n    options: {};\n    auth: () => FirebaseAuth;\n    database: (databaseURL?: string) => FirebaseDatabase;\n    messaging: () => FirebaseMessaging;\n    performance: () => any; // SEMVER: once >= 6 import performance.Performance\n    storage: (storageBucket?: string) => FirebaseStorage;\n    delete: () => Promise<void>;\n    firestore: () => FirebaseFirestore;\n    functions: (region?: string) => FirebaseFunctions;\n}\n\nexport function _firebaseAppFactory(options: FirebaseOptions, nameOrConfig?: string|FirebaseAppConfig|null) {\n    const name = typeof nameOrConfig === 'string' && nameOrConfig || '[DEFAULT]';\n    const config = typeof nameOrConfig === 'object' && nameOrConfig || {};\n    config.name = config.name || name;\n    // Added any due to some inconsistency between @firebase/app and firebase types\n    const existingApp = firebase.apps.filter(app => app && app.name === config.name)[0] as any;\n    // We support FirebaseConfig, initializeApp's public type only accepts string; need to cast as any\n    // Could be solved with https://github.com/firebase/firebase-js-sdk/pull/1206\n    return (existingApp || firebase.initializeApp(options, config as any)) as FirebaseApp;\n}\n\nconst FirebaseAppProvider = {\n    provide: FirebaseApp,\n    useFactory: _firebaseAppFactory,\n    deps: [\n        FirebaseOptionsToken,\n        [new Optional(), FirebaseNameOrConfigToken]\n    ]\n};\n \n@NgModule({\n    providers: [ FirebaseAppProvider ],\n})\nexport class AngularFireModule {\n    static initializeApp(options: FirebaseOptions, nameOrConfig?: string | FirebaseAppConfig) {\n        return {\n            ngModule: AngularFireModule,\n            providers: [\n                { provide: FirebaseOptionsToken, useValue: options },\n                { provide: FirebaseNameOrConfigToken, useValue: nameOrConfig }\n            ]\n        }\n    }\n}"]}