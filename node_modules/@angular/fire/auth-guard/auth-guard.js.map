{"version":3,"file":"auth-guard.js","sourceRoot":"","sources":["../../../src/auth-guard/auth-guard.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, InjectionToken } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\nimport { Observable, of, pipe, UnaryFunction } from 'rxjs';\nimport { map, switchMap, take } from 'rxjs/operators'\nimport { User, auth } from 'firebase/app';\nimport { AngularFireAuth } from '@angular/fire/auth';\n\nexport type AuthPipeGenerator = (next: ActivatedRouteSnapshot, state: RouterStateSnapshot) => AuthPipe;\nexport type AuthPipe = UnaryFunction<Observable<User|null>, Observable<boolean|any[]>>;\n\n@Injectable()\nexport class AngularFireAuthGuard implements CanActivate {\n\n  constructor(private afAuth: AngularFireAuth, private router: Router) {}\n\n  canActivate(next: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    const authPipeFactory: AuthPipeGenerator = next.data.authGuardPipe || (() => loggedIn);\n    return this.afAuth.user.pipe(\n        take(1),\n        authPipeFactory(next, state),\n        map(canActivate => typeof canActivate == \"boolean\" ? canActivate : this.router.createUrlTree(canActivate))\n    );\n  }\n\n}\n\nexport const canActivate = (pipe: AuthPipe|AuthPipeGenerator) => ({\n    canActivate: [ AngularFireAuthGuard ], data: { authGuardPipe: pipe.name === \"\" ? pipe : () => pipe}\n});\n\nexport const loggedIn: AuthPipe = map(user => !!user);\nexport const isNotAnonymous: AuthPipe = map(user => !!user && !user.isAnonymous);\nexport const idTokenResult = switchMap((user: User|null) => user ? user.getIdTokenResult() : of(null));\nexport const emailVerified: AuthPipe = map(user => !!user && user.emailVerified);\nexport const customClaims = pipe(idTokenResult, map(idTokenResult => idTokenResult ? idTokenResult.claims : []));\nexport const hasCustomClaim = (claim:string) => pipe(customClaims, map(claims =>  claims.hasOwnProperty(claim)));\nexport const redirectUnauthorizedTo = (redirect: any[]) => pipe(loggedIn, map(loggedIn => loggedIn || redirect));\nexport const redirectLoggedInTo = (redirect: any[]) =>  pipe(loggedIn, map(loggedIn => loggedIn && redirect || true));"]}