{"version":3,"file":"auth-guard.js","sourceRoot":"","sources":["../../../../src/auth-guard/auth-guard.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, InjectionToken } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\nimport { Observable, of, pipe, UnaryFunction } from 'rxjs';\nimport { map, switchMap, take } from 'rxjs/operators'\nimport { User, auth } from 'firebase/app';\nimport { AngularFireAuth } from '@angular/fire/auth';\n\nexport type AuthPipeGenerator = (next: ActivatedRouteSnapshot, state: RouterStateSnapshot) => AuthPipe;\nexport type AuthPipe = UnaryFunction<Observable<User|null>, Observable<boolean|any[]>>;\n\n@Injectable()\nexport class AngularFireAuthGuard implements CanActivate {\n\n  constructor(private afAuth: AngularFireAuth, private router: Router) {}\n\n  canActivate(next: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    const authPipeFactory: AuthPipeGenerator = next.data.authGuardPipe || (() => loggedIn);\n    return this.afAuth.user.pipe(\n        take(1),\n        authPipeFactory(next, state),\n        map(canActivate => typeof canActivate == \"boolean\" ? canActivate : this.router.createUrlTree(canActivate))\n    );\n  }\n\n}\n\nexport const canActivate = (pipe: AuthPipe|AuthPipeGenerator) => ({\n    canActivate: [ AngularFireAuthGuard ], data: { authGuardPipe: pipe.name === \"\" ? pipe : () => pipe}\n});\n\nexport const loggedIn: AuthPipe = map(user => !!user);\nexport const isNotAnonymous: AuthPipe = map(user => !!user && !user.isAnonymous);\nexport const idTokenResult = switchMap((user: User|null) => user ? user.getIdTokenResult() : of(null));\nexport const emailVerified: AuthPipe = map(user => !!user && user.emailVerified);\nexport const customClaims = pipe(idTokenResult, map(idTokenResult => idTokenResult ? idTokenResult.claims : []));\nexport const hasCustomClaim = (claim:string) => pipe(customClaims, map(claims =>  claims.hasOwnProperty(claim)));\nexport const redirectUnauthorizedTo = (redirect: any[]) => pipe(loggedIn, map(loggedIn => loggedIn || redirect));\nexport const redirectLoggedInTo = (redirect: any[]) =>  pipe(loggedIn, map(loggedIn => loggedIn && redirect || true));"]}