{"code":"/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\nimport { openDb } from 'idb';\r\nvar DATABASE_NAME = 'firebase-installations-database';\r\nvar DATABASE_VERSION = 1;\r\nvar OBJECT_STORE_NAME = 'firebase-installations-store';\r\nvar dbPromise = openDb(DATABASE_NAME, DATABASE_VERSION, function (upgradeDB) {\r\n    // We don't use 'break' in this switch statement, the fall-through\r\n    // behavior is what we want, because if there are multiple versions between\r\n    // the old version and the current version, we want ALL the migrations\r\n    // that correspond to those versions to run, not only the last one.\r\n    switch (upgradeDB.oldVersion) {\r\n        case 0:\r\n            upgradeDB.createObjectStore(OBJECT_STORE_NAME);\r\n    }\r\n});\r\n/** Gets record(s) from the objectStore that match the given key. */\r\nexport function get(appConfig) {\r\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n        var key, db;\r\n        return tslib_1.__generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    key = getKey(appConfig);\r\n                    return [4 /*yield*/, dbPromise];\r\n                case 1:\r\n                    db = _a.sent();\r\n                    return [2 /*return*/, db\r\n                            .transaction(OBJECT_STORE_NAME)\r\n                            .objectStore(OBJECT_STORE_NAME)\r\n                            .get(key)];\r\n            }\r\n        });\r\n    });\r\n}\r\n/** Assigns or overwrites the record for the given key with the given value. */\r\nexport function set(appConfig, value) {\r\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n        var key, db, tx;\r\n        return tslib_1.__generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    key = getKey(appConfig);\r\n                    return [4 /*yield*/, dbPromise];\r\n                case 1:\r\n                    db = _a.sent();\r\n                    tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\r\n                    tx.objectStore(OBJECT_STORE_NAME).put(value, key);\r\n                    return [4 /*yield*/, tx.complete];\r\n                case 2:\r\n                    _a.sent();\r\n                    return [2 /*return*/, value];\r\n            }\r\n        });\r\n    });\r\n}\r\n/** Removes record(s) from the objectStore that match the given key. */\r\nexport function remove(appConfig) {\r\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n        var key, db, tx;\r\n        return tslib_1.__generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    key = getKey(appConfig);\r\n                    return [4 /*yield*/, dbPromise];\r\n                case 1:\r\n                    db = _a.sent();\r\n                    tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\r\n                    tx.objectStore(OBJECT_STORE_NAME).delete(key);\r\n                    return [2 /*return*/, tx.complete];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Atomically updates a record with the result of updateFn, which gets\r\n * called with the current value. If newValue is undefined, the record is\r\n * deleted instead.\r\n * @return Updated value\r\n */\r\nexport function update(appConfig, updateFn) {\r\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n        var key, db, tx, store, oldValue, newValue;\r\n        return tslib_1.__generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    key = getKey(appConfig);\r\n                    return [4 /*yield*/, dbPromise];\r\n                case 1:\r\n                    db = _a.sent();\r\n                    tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\r\n                    store = tx.objectStore(OBJECT_STORE_NAME);\r\n                    return [4 /*yield*/, store.get(key)];\r\n                case 2:\r\n                    oldValue = _a.sent();\r\n                    newValue = updateFn(oldValue);\r\n                    if (newValue === oldValue) {\r\n                        return [2 /*return*/, newValue];\r\n                    }\r\n                    if (newValue === undefined) {\r\n                        store.delete(key);\r\n                    }\r\n                    else {\r\n                        store.put(newValue, key);\r\n                    }\r\n                    return [4 /*yield*/, tx.complete];\r\n                case 3:\r\n                    _a.sent();\r\n                    return [2 /*return*/, newValue];\r\n            }\r\n        });\r\n    });\r\n}\r\nexport function clear() {\r\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n        var db, tx;\r\n        return tslib_1.__generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0: return [4 /*yield*/, dbPromise];\r\n                case 1:\r\n                    db = _a.sent();\r\n                    tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\r\n                    tx.objectStore(OBJECT_STORE_NAME).clear();\r\n                    return [2 /*return*/, tx.complete];\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction getKey(appConfig) {\r\n    return appConfig.appName + \"!\" + appConfig.appId;\r\n}\r\n//# sourceMappingURL=idb-manager.js.map","references":["/tmp/tmp-19136jqr4muXJJfGW/node_modules/idb/lib/idb.d.ts","/tmp/tmp-19136jqr4muXJJfGW/packages/installations/src/interfaces/app-config.ts"],"map":"{\"version\":3,\"file\":\"idb-manager.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/helpers/idb-manager.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/tmp/tmp-19136jqr4muXJJfGW/packages/installations/src/helpers/idb-manager.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { AppConfig } from '../interfaces/app-config';\r\n/** Gets record(s) from the objectStore that match the given key. */\r\nexport declare function get<ReturnType>(appConfig: AppConfig): Promise<ReturnType | undefined>;\r\n/** Assigns or overwrites the record for the given key with the given value. */\r\nexport declare function set<ValueType>(appConfig: AppConfig, value: ValueType): Promise<ValueType>;\r\n/** Removes record(s) from the objectStore that match the given key. */\r\nexport declare function remove(appConfig: AppConfig): Promise<void>;\r\n/**\r\n * Atomically updates a record with the result of updateFn, which gets\r\n * called with the current value. If newValue is undefined, the record is\r\n * deleted instead.\r\n * @return Updated value\r\n */\r\nexport declare function update<OldType, NewType>(appConfig: AppConfig, updateFn: (previousValue: OldType | undefined) => NewType): Promise<NewType>;\r\nexport declare function clear(): Promise<void>;\r\n"}}
