{"version":3,"file":"backend.js","sourceRoot":"","sources":["../../src/js/backend.ts"],"names":[],"mappings":"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","sourcesContent":["import { BrowserOptions } from '@sentry/browser';\nimport { BrowserBackend } from '@sentry/browser/dist/backend';\nimport { BaseBackend, getCurrentHub } from '@sentry/core';\nimport { Event, EventHint, Severity } from '@sentry/types';\nimport { forget, getGlobalObject, logger, SyncPromise } from '@sentry/utils';\n\nconst PLUGIN_NAME = 'Sentry';\n\n/**\n * Configuration options for the Sentry Cordova SDK.\n * @see CordovaFrontend for more information.\n */\nexport interface CordovaOptions extends BrowserOptions {\n  /**\n   * Enables crash reporting for native crashes.\n   * Defaults to `true`.\n   */\n  enableNative?: boolean;\n}\n\n/** The Sentry Cordova SDK Backend. */\nexport class CordovaBackend extends BaseBackend<BrowserOptions> {\n  private readonly _browserBackend: BrowserBackend;\n\n  private readonly _deviceReadyCallback?: () => void;\n\n  /** Creates a new cordova backend instance. */\n  public constructor(protected readonly _options: CordovaOptions = {}) {\n    super(_options);\n    this._browserBackend = new BrowserBackend(_options);\n\n    if (this._isCordova() && _options.enableNative !== false) {\n      this._deviceReadyCallback = () => {\n        this._runNativeInstall();\n      };\n      getGlobalObject<Window>().document.addEventListener('deviceready', this._deviceReadyCallback);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromException(exception: any, hint?: EventHint): SyncPromise<Event> {\n    return this._browserBackend.eventFromException(exception, hint);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromMessage(message: string, level: Severity = Severity.Info, hint?: EventHint): SyncPromise<Event> {\n    return this._browserBackend.eventFromMessage(message, level, hint);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event): void {\n    this._nativeCall('sendEvent', event).catch(e => {\n      logger.warn(e);\n      this._browserBackend.sendEvent(event);\n    });\n  }\n\n  // CORDOVA --------------------\n  /**\n   * Uses exec to call cordova functions\n   * @param action name of the action\n   * @param args Arguments\n   */\n  private async _nativeCall(action: string, ...args: any[]): Promise<void> {\n    return new Promise<any>((resolve, reject) => {\n      if (this._options.enableNative === false) {\n        reject('enableNative = false, using browser transport');\n        return;\n      }\n\n      const _window = getGlobalObject<any>();\n      // tslint:disable-next-line: no-unsafe-any\n      const exec = _window && _window.Cordova && _window.Cordova.exec;\n      if (!exec) {\n        reject('Cordova.exec not available');\n      } else {\n        try {\n          // tslint:disable-next-line: no-unsafe-any\n          _window.Cordova.exec(resolve, reject, PLUGIN_NAME, action, args);\n        } catch (e) {\n          reject('Cordova.exec not available');\n        }\n      }\n    });\n  }\n\n  /**\n   * Calling into native install function\n   */\n  private _runNativeInstall(): void {\n    if (this._deviceReadyCallback) {\n      getGlobalObject<Window>().document.removeEventListener('deviceready', this._deviceReadyCallback);\n      if (this._options.dsn && this._options.enabled !== false) {\n        forget(this._nativeCall('install', this._options.dsn, this._options));\n      }\n      // tslint:disable:no-unsafe-any\n      const scope = getCurrentHub().getScope();\n      if (scope) {\n        scope.addScopeListener(internalScope => {\n          this._nativeCall('setExtraContext', (internalScope as any)._extra).catch(() => {\n            // We do nothing since scope is handled and attached to the event.\n            // This only applies to android.\n          });\n          this._nativeCall('setTagsContext', (internalScope as any)._tags).catch(() => {\n            // We do nothing since scope is handled and attached to the event.\n            // This only applies to android.\n          });\n          this._nativeCall('setUserContext', (internalScope as any)._user).catch(() => {\n            // We do nothing since scope is handled and attached to the event.\n            // This only applies to android.\n          });\n          this._nativeCall('addBreadcrumb', (internalScope as any)._breadcrumbs.pop()).catch(() => {\n            // We do nothing since scope is handled and attached to the event.\n            // This only applies to android.\n          });\n        });\n      }\n      // tslint:enable:no-unsafe-any\n    }\n  }\n\n  /**\n   * Has cordova on window?\n   */\n  private _isCordova(): boolean {\n    // tslint:disable-next-line: no-unsafe-any\n    return getGlobalObject<any>().cordova !== undefined || getGlobalObject<any>().Cordova !== undefined;\n  }\n}\n"]}